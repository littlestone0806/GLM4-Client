<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JsonWebToken</name>
    </assembly>
    <members>
        <member name="T:JsonWebToken.AlgorithmCategory">
            <summary>
            The categories of algorithm.
            </summary>
        </member>
        <member name="F:JsonWebToken.AlgorithmCategory.None">
            <summary>
            No category.
            </summary>
        </member>
        <member name="F:JsonWebToken.AlgorithmCategory.EllipticCurve">
            <summary>
            Elliptic curve algorithm.
            </summary>
        </member>
        <member name="F:JsonWebToken.AlgorithmCategory.Rsa">
            <summary>
            RSA algorithm.
            </summary>
        </member>
        <member name="F:JsonWebToken.AlgorithmCategory.Aes">
            <summary>
            AES algorithm
            </summary>
        </member>
        <member name="F:JsonWebToken.AlgorithmCategory.AesGcm">
            <summary>
            AES-GCM algorithm
            </summary>
        </member>
        <member name="F:JsonWebToken.AlgorithmCategory.Hmac">
            <summary>
            HMAC algorithm
            </summary>
        </member>
        <member name="F:JsonWebToken.AlgorithmCategory.Direct">
            <summary>
            Direct algorithm
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.None">
            <summary>
            'none'
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.HmacSha256">
            <summary>
            'HS256'
            https://tools.ietf.org/html/rfc8152#section-9.1
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.HmacSha384">
            <summary>
            'HS384'
            https://tools.ietf.org/html/rfc8152#section-9.1
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.HmacSha512">
            <summary>
            'HS512'
            https://tools.ietf.org/html/rfc8152#section-9.1
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.RsaSha256">
            <summary>
            'RS256'
            https://tools.ietf.org/html/draft-ietf-cose-webauthn-algorithms-08#section-2
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.RsaSha384">
            <summary>
            'RS384'
            https://tools.ietf.org/html/draft-ietf-cose-webauthn-algorithms-08#section-2
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.RsaSha512">
            <summary>
            'RS512'
            https://tools.ietf.org/html/draft-ietf-cose-webauthn-algorithms-08#section-2
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.EcdsaSha256K">
            <summary>
            'ES256K'
            https://tools.ietf.org/html/draft-ietf-cose-webauthn-algorithms-05
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.EcdsaSha256">
            <summary>
            'ES256'
            https://tools.ietf.org/html/rfc8152#section-8.1
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.EcdsaSha384">
            <summary>
            'ES384'
            https://tools.ietf.org/html/rfc8152#section-8.1
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.EcdsaSha512">
            <summary>
            'ES512'
            https://tools.ietf.org/html/rfc8152#section-8.1
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.RsaSsaPssSha256">
            <summary>
            'PS256'
            https://tools.ietf.org/html/rfc8230#section-2
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.RsaSsaPssSha384">
            <summary>
            'PS384'
            https://tools.ietf.org/html/rfc8230#section-2
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.RsaSsaPssSha512">
            <summary>
            'PS512'
            https://tools.ietf.org/html/rfc8230#section-2
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.Direct">
            <summary>
            'dir'
            https://tools.ietf.org/html/rfc8152#section-12.1.1
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.Aes128KW">
            <summary>
            'A128KW'
            https://tools.ietf.org/html/rfc8152#section-12.2.1
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.Aes192KW">
            <summary>
            'A192KW'
            https://tools.ietf.org/html/rfc8152#section-12.2.1
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.Aes256KW">
            <summary>
            'A256KW'
            https://tools.ietf.org/html/rfc8152#section-12.2.1
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.Aes128GcmKW">
            <summary>
            'A128GCMKW'
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.Aes192GcmKW">
            <summary>
            'A192GCMKW'
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.Aes256GcmKW">
            <summary>
            'A256GCMKW'
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.RsaPkcs1">
            <summary>
            'RSA1_5'
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.RsaOaep">
            <summary>
            'RSA-OAEP'
            https://tools.ietf.org/html/rfc8230#section-3
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.RsaOaep256">
            <summary>
            'RSA-OAEP-256'
            https://tools.ietf.org/html/rfc8230#section-3
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.RsaOaep384">
            <summary>
            'RSA-OAEP-256'
            https://tools.ietf.org/html/rfc8230#section-3
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.RsaOaep512">
            <summary>
            'RSA-OAEP-512'
            https://tools.ietf.org/html/rfc8230#section-3
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.EcdhEs">
            <summary>
            'ECDH-ES'
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.EcdhEsAes128KW">
            <summary>
            'ECDH-ES+A128KW'
            https://tools.ietf.org/html/rfc8152#section-12.5.1
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.EcdhEsAes192KW">
            <summary>
            'ECDH-ES+A192KW'
            https://tools.ietf.org/html/rfc8152#section-12.5.1
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.EcdhEsAes256KW">
            <summary>
            'ECDH-ES+A256KW'
            https://tools.ietf.org/html/rfc8152#section-12.5.1
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.AesCbc128HS256">
            <summary>
            A128CBC-HS256
            https://tools.ietf.org/html/rfc8152#section-9.2
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.AesCbc192HS384">
            <summary>
            A192CBC-HS384
            https://tools.ietf.org/html/rfc8152#section-9.2
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.AesCbc256HS512">
            <summary>
            A256CBC-HS512
            https://tools.ietf.org/html/rfc8152#section-9.2
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.Aes128Gcm">
            <summary>
            A128GCM
            https://tools.ietf.org/html/rfc8152#section-10.1
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.Aes192Gcm">
            <summary>
            A192GCM
            https://tools.ietf.org/html/rfc8152#section-10.1
            </summary>
        </member>
        <member name="F:JsonWebToken.Algorithms.Aes256Gcm">
            <summary>
            A256GCM
            https://tools.ietf.org/html/rfc8152#section-10.1
            </summary>
        </member>
        <member name="T:JsonWebToken.AsymmetricJwk">
            <summary>
            Represents an asymmetric JSON Web Key as defined in https://tools.ietf.org/html/rfc7518#section-6.
            </summary>
        </member>
        <member name="F:JsonWebToken.AsymmetricJwk._d">
            <summary>
            The 'd' (ECC - Private Key OR RSA - Private Exponent).
            </summary>
        </member>
        <member name="M:JsonWebToken.AsymmetricJwk.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.AsymmetricJwk"/> class.
            </summary>
        </member>
        <member name="M:JsonWebToken.AsymmetricJwk.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.AsymmetricJwk"/> class.
            </summary>
        </member>
        <member name="M:JsonWebToken.AsymmetricJwk.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.AsymmetricJwk"/> class.
            </summary>
        </member>
        <member name="M:JsonWebToken.AsymmetricJwk.#ctor(JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.AsymmetricJwk"/> class.
            </summary>
        </member>
        <member name="M:JsonWebToken.AsymmetricJwk.#ctor(System.Byte[],JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.AsymmetricJwk"/> class.
            </summary>
        </member>
        <member name="M:JsonWebToken.AsymmetricJwk.#ctor(System.String,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.AsymmetricJwk"/> class.
            </summary>
        </member>
        <member name="M:JsonWebToken.AsymmetricJwk.#ctor(JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.AsymmetricJwk"/> class.
            </summary>
        </member>
        <member name="M:JsonWebToken.AsymmetricJwk.#ctor(System.Byte[],JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.AsymmetricJwk"/> class.
            </summary>
        </member>
        <member name="M:JsonWebToken.AsymmetricJwk.#ctor(System.String,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.AsymmetricJwk"/> class.
            </summary>
        </member>
        <member name="P:JsonWebToken.AsymmetricJwk.D">
            <summary>
            Gets the 'd' (ECC - Private Key OR RSA - Private Exponent).
            </summary>
        </member>
        <member name="P:JsonWebToken.AsymmetricJwk.HasPrivateKey">
            <summary>
            Gets a bool indicating if a private key exists.
            </summary>
            <return>true if it has a private key; otherwise, false.</return>
        </member>
        <member name="M:JsonWebToken.AsymmetricJwk.Dispose">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.AuthenticatedDecryptor">
            <summary>
            Provides authenticated decryption.
            </summary>
        </member>
        <member name="M:JsonWebToken.AuthenticatedDecryptor.TryDecrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
            <summary>
            Try to decrypt the <paramref name="ciphertext"/>. 
            </summary>
            <param name="key">The encyrption key.</param>
            <param name="ciphertext">The ciphertext to decrypt.</param>
            <param name="associatedData">The associated data used to encrypt.</param>
            <param name="nonce">The nonce used to encrypt.</param>
            <param name="authenticationTag">The authentication tag</param>
            <param name="plaintext">The resulting plaintext.</param>
            <param name="bytesWritten">The bytes written in the <paramref name="plaintext"/>.</param>
            <returns></returns>
        </member>
        <member name="T:JsonWebToken.AuthenticatedEncryptor">
            <summary>
            Provides authenticated encryption and decryption.
            </summary>
        </member>
        <member name="M:JsonWebToken.AuthenticatedEncryptor.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte},System.Int32@)">
            <summary>
            Encrypts the <paramref name="plaintext"/>.
            </summary>
            <param name="key">The key used to encrypt to encrypt.</param>
            <param name="plaintext">The plaintext to encrypt.</param>
            <param name="nonce">An arbitrary value to be used only once.</param>
            <param name="associatedData">The associated data.</param>
            <param name="ciphertext">The resulting ciphertext.</param>
            <param name="authenticationTag">The resulting authentication tag.</param>
            <param name="authenticationTagBytesWritten">The number of written bytes for the authentication tag.</param>
        </member>
        <member name="M:JsonWebToken.AuthenticatedEncryptor.GetCiphertextSize(System.Int32)">
            <summary>
            Gets the size of the resulting ciphertext.
            </summary>
            <param name="plaintextSize">The plaintext size.</param>
        </member>
        <member name="M:JsonWebToken.AuthenticatedEncryptor.GetNonceSize">
            <summary>
            Gets the required size of the nonce.
            </summary>
        </member>
        <member name="M:JsonWebToken.AuthenticatedEncryptor.GetTagSize">
            <summary>
            Gets the size of the resulting authentication tag.
            </summary>
        </member>
        <member name="M:JsonWebToken.AuthenticatedEncryptor.GetBase64NonceSize">
            <summary>
            Gets the required size of the  base64-URL nonce.
            </summary>
        </member>
        <member name="T:JsonWebToken.Base64Url">
            <summary>
            Encodes and Decodes strings as Base64Url.
            </summary>
            <remarks>Issued from https://github.com/aspnet/.
            </remarks>
        </member>
        <member name="M:JsonWebToken.Base64Url.Decode(System.String)">
            <summary>
            Decodes a string of UTF-8 base64url-encoded text.
            </summary>
        </member>
        <member name="M:JsonWebToken.Base64Url.Decode(System.ReadOnlySpan{System.Byte})">
            <summary>
            Decodes a span of UTF-8 base64url-encoded text.
            </summary>
        </member>
        <member name="M:JsonWebToken.Base64Url.Decode(System.ReadOnlySpan{System.Char},System.Span{System.Byte})">
            <summary>
            Decodes a span of UTF-8 base64url-encoded text into a span of bytes.
            </summary>
            <returns>The number of the bytes written to <paramref name="data"/>.</returns>
        </member>
        <member name="M:JsonWebToken.Base64Url.Decode(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Decodes the span of UTF-8 base64url-encoded text into a span of bytes.
            </summary>
            <returns>The number of the bytes written to <paramref name="data"/>.</returns>
        </member>
        <member name="M:JsonWebToken.Base64Url.Decode(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@)">
            <summary>
            Decodes the span of UTF-8 base64url-encoded text into binary data.
            </summary>
        </member>
        <member name="M:JsonWebToken.Base64Url.Encode(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Encodes a span of UTF-8 text into a span of bytes.
            </summary>
            <returns>The number of the bytes written to <paramref name="base64Url"/>.</returns>
        </member>
        <member name="M:JsonWebToken.Base64Url.Encode(System.ReadOnlySpan{System.Byte})">
            <summary>
            Encodes a span of UTF-8 text.
            </summary>
            <returns>The base64-url encoded string.</returns>
        </member>
        <member name="M:JsonWebToken.Base64Url.Encode(System.ReadOnlySpan{System.Char})">
            <summary>
            Encodes a string of UTF-8 text.
            </summary>
            <returns>The base64-url encoded string.</returns>
        </member>
        <member name="M:JsonWebToken.Base64Url.GetArraySizeRequiredToDecode(System.Int32)">
            <summary>
            Gets the minimum buffer size required for decoding of <paramref name="count"/> characters.
            </summary>
            <param name="count">The number of characters to decode.</param>
            <returns>
            The minimum buffer size required for decoding  of <paramref name="count"/> characters.
            </returns>
        </member>
        <member name="M:JsonWebToken.Base64Url.GetArraySizeRequiredToEncode(System.Int32)">
            <summary>
            Gets the minimum output buffer size required for encoding <paramref name="count"/> bytes.
            </summary>
            <param name="count">The number of characters to encode.</param>
            <returns>
            The minimum output buffer size required for encoding <paramref name="count"/> <see cref="T:System.Byte"/>s.
            </returns>
        </member>
        <member name="T:JsonWebToken.BinaryJweDescriptor">
            <summary>
            Defines an encrypted JWT with a binary payload.
            </summary>
        </member>
        <member name="M:JsonWebToken.BinaryJweDescriptor.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.BinaryJweDescriptor"/> class.
            </summary>
            <param name="payload"></param>
        </member>
        <member name="M:JsonWebToken.BinaryJweDescriptor.#ctor(JsonWebToken.JwtObject,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.BinaryJweDescriptor"/> class.
            </summary>
            <param name="header"></param>
            <param name="payload"></param>
        </member>
        <member name="M:JsonWebToken.BinaryJweDescriptor.Encode(JsonWebToken.EncodingContext)">
            <inheritdoc />
        </member>
        <member name="T:JsonWebToken.CompressionAlgorithm">
            <summary>
            Defines compression algorithm.
            </summary>
        </member>
        <member name="F:JsonWebToken.CompressionAlgorithm.Deflate">
            <summary>
            Deflate
            </summary>
        </member>
        <member name="P:JsonWebToken.CompressionAlgorithm.Id">
            <summary>
            Gets the algorithm identifier. 
            </summary>
        </member>
        <member name="P:JsonWebToken.CompressionAlgorithm.Name">
            <summary>
            Gets the name of the compression algorithm.
            </summary>
        </member>
        <member name="P:JsonWebToken.CompressionAlgorithm.Utf8Name">
            <summary>
            Gets the name of the signature algorithm.
            </summary>
        </member>
        <member name="P:JsonWebToken.CompressionAlgorithm.Compressor">
            <summary>
            Gets the <see cref="P:JsonWebToken.CompressionAlgorithm.Compressor"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.CompressionAlgorithm.#ctor(System.SByte,System.String,JsonWebToken.Compressor)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.CompressionAlgorithm"/> class.
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="compressor"></param>
        </member>
        <member name="M:JsonWebToken.CompressionAlgorithm.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a
            <see cref="T:JsonWebToken.CompressionAlgorithm"/> object, have the same value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.CompressionAlgorithm.Equals(JsonWebToken.CompressionAlgorithm)">
            <summary>
            Determines whether two specified <see cref="T:JsonWebToken.CompressionAlgorithm"/> objects have the same value.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.CompressionAlgorithm.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:JsonWebToken.CompressionAlgorithm"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.CompressionAlgorithm.op_Equality(JsonWebToken.CompressionAlgorithm,JsonWebToken.CompressionAlgorithm)">
            <summary>
            Determines whether two specified <see cref="T:JsonWebToken.CompressionAlgorithm"/> have the same value.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.CompressionAlgorithm.op_Inequality(JsonWebToken.CompressionAlgorithm,JsonWebToken.CompressionAlgorithm)">
            <summary>
            Determines whether two specified <see cref="T:JsonWebToken.CompressionAlgorithm"/> have different values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.CompressionAlgorithm.TryParseSlow(System.Text.Json.Utf8JsonReader@,JsonWebToken.CompressionAlgorithm@)">
            <summary>
            Parse the current value of the <see cref="T:System.Text.Json.Utf8JsonReader"/> into its <see cref="T:JsonWebToken.CompressionAlgorithm"/> representation.
            </summary>
            <param name="reader"></param>
            <param name="algorithm"></param>
        </member>
        <member name="M:JsonWebToken.CompressionAlgorithm.TryParse(System.ReadOnlySpan{System.Byte},JsonWebToken.CompressionAlgorithm@)">
            <summary>
            Cast the <see cref="T:System.ReadOnlySpan`1"/> into its <see cref="T:JsonWebToken.SignatureAlgorithm"/> representation.
            </summary>
            <param name="value"></param>
            <param name="algorithm"></param>
        </member>
        <member name="M:JsonWebToken.CompressionAlgorithm.op_Explicit(System.Byte[])~JsonWebToken.CompressionAlgorithm">
            <summary>
            Cast the array of <see cref="T:System.Byte"/>s into its <see cref="T:JsonWebToken.CompressionAlgorithm"/> representation.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.CompressionAlgorithm.op_Explicit(JsonWebToken.CompressionAlgorithm)~System.Int64">
            <summary>
            Cast the <see cref="T:JsonWebToken.CompressionAlgorithm"/> into its <see cref="T:System.Int64"/> representation.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.CompressionAlgorithm.op_Explicit(JsonWebToken.CompressionAlgorithm)~System.Byte[]">
            <summary>
            Cast the <see cref="T:JsonWebToken.CompressionAlgorithm"/> into its <see cref="T:System.Byte"/> array representation.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.CompressionAlgorithm.ToString">
            <inheritsddoc />
        </member>
        <member name="T:JsonWebToken.Compressor">
            <summary>
            Provides compression and decompression services.
            </summary>
        </member>
        <member name="M:JsonWebToken.Compressor.Compress(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compresses the data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.Compressor.Decompress(System.ReadOnlySpan{System.Byte})">
            <summary>
            Decompresses the compressed data.
            </summary>
            <param name="compressedData">The compressed data.</param>
            <returns></returns>
        </member>
        <member name="T:JsonWebToken.Compressor`1">
            <summary>
            Provides compression and decompression services, based on <typeparamref name="TStream"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.Compressor`1.CreateDecompressionStream(System.IO.Stream)">
            <summary>
            Creates a decompression <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.Compressor`1.CreateCompressionStream(System.IO.Stream)">
            <summary>
            Creates a compression <see cref="T:System.IO.Stream"/>.
            </summary> 
        </member>
        <member name="M:JsonWebToken.Compressor`1.Compress(System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.Compressor`1.Decompress(System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:JsonWebToken.AesBlockDecryptor">
            <summary>
            Provides AES decryption.
            </summary>
        </member>
        <member name="F:JsonWebToken.AesBlockDecryptor.BlockSize">
            <summary>
            The size of the AES block.
            </summary>
        </member>
        <member name="M:JsonWebToken.AesBlockDecryptor.Dispose">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.AesBlockDecryptor.DecryptBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Decrypt a <paramref name="ciphertext"/>.
            </summary>
            <param name="ciphertext"></param>
            <param name="plaintext"></param>
        </member>
        <member name="T:JsonWebToken.AesBlockEncryptor">
            <summary>
            Provides encryption.
            </summary>
        </member>
        <member name="F:JsonWebToken.AesBlockEncryptor.BlockSize">
            <summary>
            The size of the AES block.
            </summary>
        </member>
        <member name="M:JsonWebToken.AesBlockEncryptor.EncryptBlock(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Encrypt a <paramref name="plaintext"/>.
            </summary>
            <param name="plaintext"></param>
            <param name="ciphertext"></param>
        </member>
        <member name="M:JsonWebToken.AesBlockEncryptor.Dispose">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.AesBlockEncryptor.GetCiphertextLength(System.Int32)">
            <summary>
            Returns the required ciphertext length.
            </summary>
            <param name="plaintextLength"></param>
        </member>
        <member name="M:JsonWebToken.Internal.AesCbcDecryptor.TryDecrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.Internal.AesCbcEncryptor.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:JsonWebToken.Internal.AesCbcHmacDecryptor">
            <summary>
            Provides authenticated encryption and decryption for AES CBC HMAC algorithm.
            </summary>
        </member>
        <member name="M:JsonWebToken.Internal.AesCbcHmacDecryptor.#ctor(JsonWebToken.EncryptionAlgorithm,JsonWebToken.AesDecryptor)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.Internal.AesCbcHmacDecryptor"/> class.
            </summary>
            <param name="encryptionAlgorithm"></param>
            <param name="decryptor"></param>
        </member>
        <member name="M:JsonWebToken.Internal.AesCbcHmacDecryptor.#ctor(JsonWebToken.EncryptionAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.Internal.AesCbcHmacDecryptor"/> class.
            </summary>
            <param name="encryptionAlgorithm"></param>
        </member>
        <member name="M:JsonWebToken.Internal.AesCbcHmacDecryptor.TryDecrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
            <inheritdoc />
        </member>
        <member name="T:JsonWebToken.Internal.AesCbcHmacEncryptor">
            <summary>
            Provides authenticated encryption and decryption for AES CBC HMAC algorithm.
            </summary>
        </member>
        <member name="M:JsonWebToken.Internal.AesCbcHmacEncryptor.#ctor(JsonWebToken.EncryptionAlgorithm,JsonWebToken.AesEncryptor)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.Internal.AesCbcHmacEncryptor"/> class.
            </summary>
            <param name="encryptionAlgorithm"></param>
            <param name="encryptor"></param>
        </member>
        <member name="M:JsonWebToken.Internal.AesCbcHmacEncryptor.#ctor(JsonWebToken.EncryptionAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.Internal.AesCbcHmacEncryptor"/> class.
            </summary>
            <param name="encryptionAlgorithm"></param>
        </member>
        <member name="M:JsonWebToken.Internal.AesCbcHmacEncryptor.GetCiphertextSize(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.Internal.AesCbcHmacEncryptor.GetNonceSize">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.Internal.AesCbcHmacEncryptor.GetBase64NonceSize">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.Internal.AesCbcHmacEncryptor.GetTagSize">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.Internal.AesCbcHmacEncryptor.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte},System.Int32@)">
            <inheritdoc />
        </member>
        <member name="T:JsonWebToken.Internal.AesKeyUnwrapper">
            <summary>
            Provides AES key unwrapping services.
            </summary>
        </member>
        <member name="T:JsonWebToken.Internal.AesKeyWrapper">
            <summary>
            Provides AES key wrapping services.
            </summary>
        </member>
        <member name="M:JsonWebToken.Internal.AesKeyWrapper.WrapKey(JsonWebToken.Jwk,JsonWebToken.JwtObject,System.Span{System.Byte})">
            <summary>
            Wrap a key using AES encryption.
            </summary>
            <param name="staticKey">the key to be wrapped. If <c>null</c>, a new <see cref="T:JsonWebToken.SymmetricJwk"/> will be generated.</param>
            <param name="header"></param>
            <param name="destination"></param>
        </member>
        <member name="T:JsonWebToken.Internal.CryptographicStore`1">
            <summary>
            Represent a store of cryptographics elements. 
            It is a specialized implementation of the <see cref="T:System.Collections.Generic.Dictionary`2" />.
            </summary>
            <remarks>Inspired from https://github.com/dotnet/coreclr/pull/8216. </remarks>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:JsonWebToken.Internal.CryptographicStore`1.Count">
            <summary>
            Gets the count of elements.
            </summary>
        </member>
        <member name="M:JsonWebToken.Internal.CryptographicStore`1.TryAdd(System.Int32,`0)">
            <summary>
            Tries to add the <paramref name="value"/> with <paramref name="key"/> as key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.Internal.CryptographicStore`1.TryGetValue(System.Int32,`0@)">
            <summary>
            Tries to get the <paramref name="value"/> withe the <paramref name="key"/> as key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.Internal.CryptographicStore`1.Dispose">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Internal.EcdhKeyUnwrapper.GetKeyUnwrapSize(System.Int32)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Internal.EcdhKeyUnwrapper.TryUnwrapKey(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},JsonWebToken.JwtHeader,System.Int32@)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Internal.EcdhKeyWrapper.GetKeyWrapSize">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Internal.EcdhKeyWrapper.WrapKey(JsonWebToken.Jwk,JsonWebToken.JwtObject,System.Span{System.Byte})">
            <inheritsdoc />
        </member>
        <member name="P:JsonWebToken.Internal.EcdsaSigner.HashSizeInBytes">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Internal.EcdsaSigner.TrySign(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Internal.EcdsaSigner.Verify(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Internal.EcdsaSigner.Dispose(System.Boolean)">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.Internal.RsaKeyUnwrapper">
            <summary>
            Provides RSA key key unwrapping services.
            </summary>
        </member>
        <member name="M:JsonWebToken.Internal.RsaKeyUnwrapper.TryUnwrapKey(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},JsonWebToken.JwtHeader,System.Int32@)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Internal.RsaKeyUnwrapper.GetKeyUnwrapSize(System.Int32)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Internal.RsaKeyUnwrapper.Dispose(System.Boolean)">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.Internal.RsaKeyWrapper">
            <summary>
            Provides RSA key wrapping and key unwrapping services.
            </summary>
        </member>
        <member name="M:JsonWebToken.Internal.RsaKeyWrapper.WrapKey(JsonWebToken.Jwk,JsonWebToken.JwtObject,System.Span{System.Byte})">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Internal.RsaKeyWrapper.GetKeyWrapSize">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Internal.RsaKeyWrapper.Dispose(System.Boolean)">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.Internal.Claims">
            <summary>
            List of registered claims from different sources
            http://tools.ietf.org/html/rfc7519#section-4
            http://openid.net/specs/openid-connect-core-1_0.html#IDToken
            http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims
            http://openid.net/specs/openid-connect-frontchannel-1_0.html#OPLogout
            https://tools.ietf.org/html/draft-ietf-secevent-token-13#section-2.2
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.Claims.AudUtf8">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary> 
        </member>
        <member name="P:JsonWebToken.Internal.Claims.ExpUtf8">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.Claims.IatUtf8">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.Claims.IssUtf8">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.Claims.JtiUtf8">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.Claims.NbfUtf8">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.Claims.SubUtf8">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="T:JsonWebToken.Internal.EpochTime">
            <summary>
            Provides helper methods for UNIX-like time.
            </summary>
        </member>
        <member name="M:JsonWebToken.Internal.EpochTime.ToEpochTime(System.DateTime)">
            <summary>
            Per JWT spec:
            Gets the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the desired date/time.
            </summary>
            <param name="datetime">The DateTime to convert to seconds.</param>
            <remarks>if dateTimeUtc less than UnixEpoch, return 0</remarks>
            <returns>the number of seconds since Unix Epoch.</returns>
        </member>
        <member name="M:JsonWebToken.Internal.EpochTime.ToDateTime(System.Int64)">
            <summary>
            Creates a DateTime from epoch time.
            </summary>
            <param name="secondsSinceUnixEpoch">Number of seconds.</param>
            <returns>The DateTime in UTC.</returns>
        </member>
        <member name="M:JsonWebToken.Internal.EpochTime.ToDateTime(System.Nullable{System.Int64})">
            <summary>
            Creates a DateTime from epoch time.
            </summary>
            <param name="secondsSinceUnixEpoch">Number of seconds.</param>
            <returns>The DateTime in UTC.</returns>
        </member>
        <member name="P:JsonWebToken.Internal.EpochTime.UtcNow">
            <summary>
            Gets the current date and time on this computer expressed as the UTC time, in the Unix epoch time format (total of seconds since the 01/01/1970). 
            </summary>
        </member>
        <member name="T:JsonWebToken.Internal.HeaderParameters">
            <summary>
            List of header parameter names see: http://tools.ietf.org/html/rfc7519#section-5.
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.HeaderParameters.AlgUtf8">
            <summary>
            see:https://tools.ietf.org/html/rfc7515#section-4.1.1
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.HeaderParameters.CtyUtf8">
            <summary>
            see:https://tools.ietf.org/html/rfc7515#section-4.1.10
            also:https://tools.ietf.org/html/rfc7519#section-5.2
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.HeaderParameters.EncUtf8">
            <summary>
            see:https://tools.ietf.org/html/rfc7516#section-4.1.2
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.HeaderParameters.JkuUtf8">
            <summary>
            see:https://tools.ietf.org/html/rfc7516#section-4.1.2
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.HeaderParameters.JwkUtf8">
            <summary>
            see:https://tools.ietf.org/html/rfc7515#section-4.1.3
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.HeaderParameters.KidUtf8">
            <summary>
            see:https://tools.ietf.org/html/rfc7515#section-4.1.4
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.HeaderParameters.TypUtf8">
            <summary>
            see:https://tools.ietf.org/html/rfc7515#section-4.1.9
            also:https://tools.ietf.org/html/rfc7519#section-5.1
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.HeaderParameters.X5cUtf8">
            <summary>
            see:https://tools.ietf.org/html/rfc7515#section-4.1.6
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.HeaderParameters.X5tUtf8">
            <summary>
            see:https://tools.ietf.org/html/rfc7515#page-12
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.HeaderParameters.X5uUtf8">
            <summary>
            see:https://tools.ietf.org/html/rfc7515#section-4.1.5
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.HeaderParameters.CritUtf8">
            <summary>
            see:https://tools.ietf.org/html/rfc7515#section-4.1.5
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.HeaderParameters.ZipUtf8">
            <summary>
            see:https://tools.ietf.org/html/rfc7516#section-4.1.3
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.HeaderParameters.EpkUtf8">
            <summary>
            see:https://tools.ietf.org/html/rfc7518#section-4.6.1
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.HeaderParameters.ApuUtf8">
            <summary>
            see:https://tools.ietf.org/html/rfc7518#section-4.6.1
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.HeaderParameters.ApvUtf8">
            <summary>
            see:https://tools.ietf.org/html/rfc7518#section-4.6.1
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.HeaderParameters.IVUtf8">
            <summary>
            see:https://tools.ietf.org/html/rfc7518#section-4.7
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.HeaderParameters.TagUtf8">
            <summary>
            see:https://tools.ietf.org/html/rfc7518#section-4.7
            </summary>
        </member>
        <member name="T:JsonWebToken.Internal.JwkParameterNames">
            <summary>
            Names for Json Web Key Values
            </summary>
        </member>
        <member name="T:JsonWebToken.Internal.JwksParameterNames">
            <summary>
            Names for Json Web Key Set Values
            </summary>
        </member>
        <member name="T:JsonWebToken.Internal.JwkTypeNames">
            <summary>
            Constants for JsonWebAlgorithms  "kty" Key Type (sec 6.1)
            http://tools.ietf.org/html/rfc7518#section-6.1
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.JwkTypeNames.EllipticCurve">
            <summary>
            Elliptic curve 'EC'.
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.JwkTypeNames.Rsa">
            <summary>
            RSA 'RSA'.
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.JwkTypeNames.Octet">
            <summary>
            Octet 'oct';
            </summary>
        </member>
        <member name="T:JsonWebToken.Internal.JwkUseNames">
            <summary>
            Constants for JsonWebKeyUse (sec 4.2)
            http://tools.ietf.org/html/rfc7517#section-4
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.JwkUseNames.Sig">
            <summary>
            Gets the 'sig' (signature) value for the 'use' header parameter.
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.JwkUseNames.Enc">
            <summary>
            Gets the 'enc' (encryption) value for the 'use' header parameter.
            </summary>
        </member>
        <member name="T:JsonWebToken.Internal.ObjectPool`1">
            <summary>
            Represent a poolable <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JsonWebToken.Internal.ObjectPool`1.#ctor(JsonWebToken.Internal.PooledObjectFactory{`0})">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.Internal.ObjectPool`1"/>.
            </summary>
            <param name="policy"></param>
        </member>
        <member name="M:JsonWebToken.Internal.ObjectPool`1.#ctor(JsonWebToken.Internal.PooledObjectFactory{`0},System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.Internal.ObjectPool`1"/>.
            </summary>
            <param name="policy"></param>
            <param name="maximumRetained"></param>
        </member>
        <member name="M:JsonWebToken.Internal.ObjectPool`1.Get">
            <summary>
            Gets a <typeparamref name="T"/> from the pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.Internal.ObjectPool`1.Return(`0)">
            <summary>
            Returns a <typeparamref name="T"/> to the pool.
            </summary>
            <param name="pooledObject"></param>
        </member>
        <member name="M:JsonWebToken.Internal.ObjectPool`1.Dispose">
            <summary>
            Dispose the managed resources.
            </summary>
        </member>
        <member name="T:JsonWebToken.Internal.PooledObjectFactory`1">
            <summary>
            Represent a factory of a poolable <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JsonWebToken.Internal.PooledObjectFactory`1.Create">
            <summary>
            Creates the poolabled <typeparamref name="T"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JsonWebToken.Internal.RequiredClaimListValidator`1">
            <summary>
            Represents a <see cref="T:JsonWebToken.IValidator"/> verifying the JWT has a required claim.
            </summary>
            <typeparam name="TClaim"></typeparam>
        </member>
        <member name="M:JsonWebToken.Internal.RequiredClaimListValidator`1.#ctor(System.String,System.Collections.Generic.IList{`0})">
            <summary>
            Initializes an instance of <see cref="T:JsonWebToken.Internal.RequiredClaimListValidator`1"/>.
            </summary>
            <param name="claim"></param>
            <param name="values"></param>
        </member>
        <member name="M:JsonWebToken.Internal.RequiredClaimListValidator`1.TryValidate(JsonWebToken.Jwt)">
            <inheritdoc />
        </member>
        <member name="T:JsonWebToken.Internal.RequiredClaimValidator">
            <summary>
            Represents a <see cref="T:JsonWebToken.IValidator"/> verifying the JWT has a required claim.
            </summary>
        </member>
        <member name="M:JsonWebToken.Internal.RequiredClaimValidator.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:JsonWebToken.Internal.RequiredClaimValidator"/>.
            </summary>
            <param name="claim"></param>
        </member>
        <member name="M:JsonWebToken.Internal.RequiredClaimValidator.TryValidate(JsonWebToken.Jwt)">
            <inheritdoc />
        </member>
        <member name="T:JsonWebToken.Internal.RequiredDoubleClaimValidator">
            <summary>
            Represents a <see cref="T:JsonWebToken.IValidator"/> verifying the JWT has a required claim.
            </summary>
        </member>
        <member name="M:JsonWebToken.Internal.RequiredDoubleClaimValidator.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:JsonWebToken.Internal.RequiredDoubleClaimValidator"/>.
            </summary>
            <param name="claim"></param>
        </member>
        <member name="M:JsonWebToken.Internal.RequiredDoubleClaimValidator.#ctor(System.String,System.Nullable{System.Double})">
            <summary>
            Initializes an instance of <see cref="T:JsonWebToken.Internal.RequiredDoubleClaimValidator"/>.
            </summary>
            <param name="claim"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.Internal.RequiredDoubleClaimValidator.TryValidate(JsonWebToken.Jwt)">
            <inheritdoc />
        </member>
        <member name="T:JsonWebToken.Internal.RequiredIntegerClaimValidator">
            <summary>
            Represents a <see cref="T:JsonWebToken.IValidator"/> verifying the JWT has a required claim.
            </summary>
        </member>
        <member name="M:JsonWebToken.Internal.RequiredIntegerClaimValidator.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:JsonWebToken.Internal.RequiredIntegerClaimValidator"/>.
            </summary>
            <param name="claim"></param>
        </member>
        <member name="M:JsonWebToken.Internal.RequiredIntegerClaimValidator.#ctor(System.String,System.Nullable{System.Int64})">
            <summary>
            Initializes an instance of <see cref="T:JsonWebToken.Internal.RequiredIntegerClaimValidator"/>.
            </summary>
            <param name="claim"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.Internal.RequiredIntegerClaimValidator.TryValidate(JsonWebToken.Jwt)">
            <inheritdoc />
        </member>
        <member name="T:JsonWebToken.Internal.RequiredStringClaimValidator">
            <summary>
            Represents a <see cref="T:JsonWebToken.IValidator"/> verifying the JWT has a required claim.
            </summary>
        </member>
        <member name="M:JsonWebToken.Internal.RequiredStringClaimValidator.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:JsonWebToken.Internal.RequiredStringClaimValidator"/>.
            </summary>
            <param name="claim"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.Internal.RequiredStringClaimValidator.TryValidate(JsonWebToken.Jwt)">
            <inheritdoc />
        </member>
        <member name="T:JsonWebToken.Internal.SequenceExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Buffers.ReadOnlySequence`1"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.Internal.SequenceExtensions.IndexOf(System.Buffers.ReadOnlySequence{System.Byte},System.Byte)">
            <summary>
            Reports the first occurrence of the specified <paramref name="value"/>.
            </summary>
            <param name="sequence"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:JsonWebToken.Internal.SymmetricSigner">
            <summary>
            Provides signing and verifying operations using a <see cref="T:JsonWebToken.SymmetricJwk"/> and specifying an algorithm.
            </summary>
        </member>
        <member name="F:JsonWebToken.Internal.SymmetricSigner.DefaultMinimumSymmetricKeySizeInBits">
            <summary>
            This is the minimum <see cref="T:JsonWebToken.SymmetricJwk"/>.KeySize when creating and verifying signatures.
            </summary>
        </member>
        <member name="P:JsonWebToken.Internal.SymmetricSigner.HashSizeInBytes">
            <inheritsdoc />
        </member>
        <member name="P:JsonWebToken.Internal.SymmetricSigner.MinimumKeySizeInBits">
            <summary>
            Gets or sets the minimum <see cref="T:JsonWebToken.SymmetricJwk"/>.KeySize.
            </summary>
        </member>
        <member name="M:JsonWebToken.Internal.SymmetricSigner.TrySign(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Internal.SymmetricSigner.Verify(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Internal.SymmetricSigner.VerifyHalf(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Internal.SymmetricSigner.Dispose(System.Boolean)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Internal.TokenReplayValidator.TryValidate(JsonWebToken.Jwt)">
            <inheritdoc />
        </member>
        <member name="T:JsonWebToken.AesDecryptor">
            <summary>
            Provides AES decryption.
            </summary>
        </member>
        <member name="F:JsonWebToken.AesDecryptor.BlockSize">
            <summary>
            The size of the AES block.
            </summary>
        </member>
        <member name="M:JsonWebToken.AesDecryptor.TryDecrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
            <summary>
            Try to decrypt the <paramref name="ciphertext"/>. 
            </summary>
            <param name="key">The decryption key.</param>
            <param name="ciphertext">The ciphertext to decrypt.</param>
            <param name="nonce">The nonce used to encrypt.</param>
            <param name="plaintext">The resulting plaintext.</param>
            <param name="bytesWritten">The bytes written in the <paramref name="plaintext"/>.</param>
            <returns></returns>
        </member>
        <member name="T:JsonWebToken.AesEncryptor">
            <summary>
            Provides encryption.
            </summary>
        </member>
        <member name="F:JsonWebToken.AesEncryptor.BlockSize">
            <summary>
            The size of the AES block.
            </summary>
        </member>
        <member name="M:JsonWebToken.AesEncryptor.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Encrypts the <paramref name="plaintext"/>.
            </summary>
            <param name="key">The key used to encrypt.</param>
            <param name="plaintext">The plaintext to encrypt.</param>
            <param name="nonce">An arbitrary value to be used only once.</param>
            <param name="ciphertext">The resulting ciphertext.</param>
        </member>
        <member name="M:JsonWebToken.AesEncryptor.GetCiphertextLength(System.Int32)">
            <summary>
            Returns the required ciphertext length.
            </summary>
            <param name="plaintextLength"></param>
        </member>
        <member name="P:JsonWebToken.Hmac.Sha2">
            <summary>
            The hash algorithm.
            </summary>
        </member>
        <member name="F:JsonWebToken.Hmac._keys">
            <summary>
            The inner &amp; outer pad keys.
            </summary>
        </member>
        <member name="P:JsonWebToken.Hmac.BlockSize">
            <summary>
            The block size.
            </summary>
        </member>
        <member name="P:JsonWebToken.Hmac.HashSize">
            <summary>
            The size of the resulting hash.
            </summary>
        </member>
        <member name="M:JsonWebToken.Hmac.#ctor(JsonWebToken.Sha2,System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.HmacSha2"/> class.
            </summary>
            <param name="sha2"></param>
            <param name="key"></param>
            <param name="hmacKey"></param>
        </member>
        <member name="M:JsonWebToken.Hmac.ComputeHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Computes the hash value.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="T:JsonWebToken.HmacSha2">
            <summary>
            Computes a Hash-based Message Authentication Code (HMAC) using a SHA2 hash function.
            </summary>
        </member>
        <member name="P:JsonWebToken.HmacSha2.Sha2">
            <summary>
            The hash algorithm.
            </summary>
        </member>
        <member name="F:JsonWebToken.HmacSha2._keys">
            <summary>
            The inner &amp; outer pad keys.
            </summary>
        </member>
        <member name="F:JsonWebToken.HmacSha2._innerPadKey">
            <summary>
            The inner pad key.
            </summary>
        </member>
        <member name="F:JsonWebToken.HmacSha2._outerPadKey">
            <summary>
            The outer pad key.
            </summary>
        </member>
        <member name="P:JsonWebToken.HmacSha2.BlockSize">
            <summary>
            The block size.
            </summary>
        </member>
        <member name="P:JsonWebToken.HmacSha2.HashSize">
            <summary>
            The size of the resulting hash.
            </summary>
        </member>
        <member name="M:JsonWebToken.HmacSha2.#ctor(JsonWebToken.Sha2,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.HmacSha2"/> class.
            </summary>
            <param name="sha2"></param>
            <param name="key"></param>
        </member>
        <member name="M:JsonWebToken.HmacSha2.ComputeHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Computes the hash value.
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:JsonWebToken.HmacSha2.Clear">
            <summary>
            Clears the keys.
            </summary>
        </member>
        <member name="M:JsonWebToken.HmacSha2.Dispose">
            <summary>
            Clears the non-managed resources.
            </summary>
        </member>
        <member name="T:JsonWebToken.Sha2">
            <summary>
            Represents the base class for SHA-2 algorithms.
            </summary>
        </member>
        <member name="M:JsonWebToken.Sha2.ComputeHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte})">
            <summary>
            Computes the hash value for the specified <paramref name="source"/>.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="prepend">Optionnal. The data to hash before the source. Must be of the length of <see cref="P:JsonWebToken.Sha2.BlockSize"/> or less.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/>.</param>
            <param name="workingSet">Optionnal. The working set used for computing the hash. Useful if you expect to chain hashing in the same thread and you want to avoid memory allocations. Use the method <see cref="M:JsonWebToken.Sha2.GetWorkingSetSize(System.Int32)"/> for getting the required size. </param>
        </member>
        <member name="M:JsonWebToken.Sha2.GetWorkingSetSize(System.Int32)">
            <summary>
            Computes the required working set size.
            </summary>
            <param name="sourceLength"></param>
            <returns></returns>
        </member>
        <member name="P:JsonWebToken.Sha2.HashSize">
            <summary>
            The size of the resulting hash.
            </summary>
        </member>
        <member name="P:JsonWebToken.Sha2.BlockSize">
            <summary>
            The size of the resulting hash.
            </summary>
        </member>
        <member name="T:JsonWebToken.Sha256">
            <summary>
            Computes SHA2-256 hash values.
            </summary>
        </member>
        <member name="F:JsonWebToken.Sha256.Sha256HashSize">
            <summary>
            The resulting hash size of the <see cref="T:JsonWebToken.Sha256"/> algorithm.
            </summary>
        </member>
        <member name="F:JsonWebToken.Sha256.Sha256BlockSize">
            <summary>
            The required  block size of the <see cref="T:JsonWebToken.Sha256"/> algorithm.
            </summary>
        </member>
        <member name="F:JsonWebToken.Sha256.Shared">
            <summary>
            Gets the default instance of the <see cref="T:JsonWebToken.Sha256"/> class.
            </summary>
        </member>
        <member name="P:JsonWebToken.Sha256.HashSize">
            <inheritsdoc />
        </member>
        <member name="P:JsonWebToken.Sha256.BlockSize">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Sha256.GetWorkingSetSize(System.Int32)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Sha256.Hash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte})">
            <summary>
            Computes the hash value for the specified <paramref name="source"/>.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="prepend">Optionnal. The data to hash before the source. Must be of the length of <see cref="P:JsonWebToken.Sha256.BlockSize"/> or less.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/>.</param>
            <param name="workingSet">Optionnal. The working set used for computing the hash. Useful if you expect to chain hashing in the same thread and you want to avoid memory allocations. Use the method <see cref="M:JsonWebToken.Sha256.GetWorkingSetSize(System.Int32)"/> for getting the required size. </param>
        </member>
        <member name="M:JsonWebToken.Sha256.Hash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Computes the hash value for the specified <paramref name="source"/>.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="prepend">Optionnal. The data to hash before the source. Must be of the length of <see cref="P:JsonWebToken.Sha256.BlockSize"/> or less.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/>.</param>
        </member>
        <member name="M:JsonWebToken.Sha256.Hash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Computes the hash value for the specified <paramref name="source"/>.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/>.</param>
        </member>
        <member name="M:JsonWebToken.Sha256.ComputeHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte})">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.Sha2Extensions">
            <summary>
            Extensions methods for <see cref="T:JsonWebToken.Sha2"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.Sha2Extensions.ComputeHash(JsonWebToken.Sha2,System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Computes the hash value for the specified <paramref name="source"/>.
            </summary>
            <param name="sha2">The SHA-2 algorithm.</param>
            <param name="source">The data to hash.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/>.</param>
        </member>
        <member name="M:JsonWebToken.Sha2Extensions.ComputeHash(JsonWebToken.Sha2,System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Computes the hash value for the specified <paramref name="source"/>.
            </summary>
            <param name="sha2">The SHA-2 algorithm.</param>
            <param name="source">The data to hash.</param>
            <param name="prepend">The data to concatenated to <paramref name="source"/> before to hash.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/>.</param>
        </member>
        <member name="M:JsonWebToken.Sha2Extensions.Hash(JsonWebToken.Sha2,System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Computes the hash value for the specified <paramref name="source"/>.
            </summary>
            <param name="sha2">The SHA-2 algorithm.</param>
            <param name="source">The data to hash.</param>
            <param name="prepend">The data to concatenated to <paramref name="source"/> before to hash.</param>
            <returns>The hashed value.</returns>
        </member>
        <member name="M:JsonWebToken.Sha2Extensions.Hash(JsonWebToken.Sha2,System.ReadOnlySpan{System.Byte})">
            <summary>
            Computes the hash value for the specified <paramref name="source"/>.
            </summary>
            <param name="sha2">The SHA-2 algorithm.</param>
            <param name="source">The data to hash.</param>
            <returns>The hashed value.</returns>
        </member>
        <member name="T:JsonWebToken.Sha384">
            <summary>
            Computes SHA2-512 hash values.
            </summary>
        </member>
        <member name="F:JsonWebToken.Sha384.Sha384HashSize">
            <summary>
            The resulting hash size of the <see cref="T:JsonWebToken.Sha384"/> algorithm.
            </summary>
        </member>
        <member name="F:JsonWebToken.Sha384.Sha384BlockSize">
            <summary>
            The required  block size of the <see cref="T:JsonWebToken.Sha384"/> algorithm.
            </summary>
        </member>
        <member name="F:JsonWebToken.Sha384.Shared">
            <summary>
            Gets the default instance of the <see cref="T:JsonWebToken.Sha384"/> class.
            </summary>
        </member>
        <member name="P:JsonWebToken.Sha384.HashSize">
            <inheritsdoc />
        </member>
        <member name="P:JsonWebToken.Sha384.BlockSize">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Sha384.GetWorkingSetSize(System.Int32)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Sha384.Hash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte})">
            <summary>
            Computes the hash value for the specified <paramref name="source"/>.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="prepend">Optionnal. The data to hash before the source. Must be of the length of <see cref="P:JsonWebToken.Sha384.BlockSize"/> or less.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/>.</param>
            <param name="workingSet">Optionnal. The working set used for computing the hash. Useful if you expect to chain hashing in the same thread and you want to avoid memory allocations. Use the method <see cref="M:JsonWebToken.Sha384.GetWorkingSetSize(System.Int32)"/> for getting the required size. </param>
        </member>
        <member name="M:JsonWebToken.Sha384.Hash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Computes the hash value for the specified <paramref name="source"/>.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="prepend">Optionnal. The data to hash before the source. Must be of the length of <see cref="P:JsonWebToken.Sha384.BlockSize"/> or less.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/>.</param>
        </member>
        <member name="M:JsonWebToken.Sha384.Hash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Computes the hash value for the specified <paramref name="source"/>.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/>.</param>
        </member>
        <member name="M:JsonWebToken.Sha384.ComputeHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte})">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.Sha512">
            <summary>
            Computes SHA2-512 hash values.
            </summary>
        </member>
        <member name="F:JsonWebToken.Sha512.Sha512HashSize">
            <summary>
            The resulting hash size of the <see cref="T:JsonWebToken.Sha512"/> algorithm.
            </summary>
        </member>
        <member name="F:JsonWebToken.Sha512.Sha512BlockSize">
            <summary>
            The required  block size of the <see cref="T:JsonWebToken.Sha512"/> algorithm.
            </summary>
        </member>
        <member name="F:JsonWebToken.Sha512.Shared">
            <summary>
            Gets the default instance of the <see cref="T:JsonWebToken.Sha512"/> class.
            </summary>
        </member>
        <member name="P:JsonWebToken.Sha512.HashSize">
            <inheritsdoc />
        </member>
        <member name="P:JsonWebToken.Sha512.BlockSize">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Sha512.GetWorkingSetSize(System.Int32)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Sha512.Hash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte})">
            <summary>
            Computes the hash value for the specified <paramref name="source"/>.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="prepend">Optionnal. The data to hash before the source. Must be of the length of <see cref="P:JsonWebToken.Sha512.BlockSize"/> or less.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/>.</param>
            <param name="workingSet">Optionnal. The working set used for computing the hash. Useful if you expect to chain hashing in the same thread and you want to avoid memory allocations. Use the method <see cref="M:JsonWebToken.Sha512.GetWorkingSetSize(System.Int32)"/> for getting the required size. </param>
        </member>
        <member name="M:JsonWebToken.Sha512.Hash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Computes the hash value for the specified <paramref name="source"/>.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="prepend">Optionnal. The data to hash before the source. Must be of the length of <see cref="P:JsonWebToken.Sha512.BlockSize"/> or less.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/>.</param>
        </member>
        <member name="M:JsonWebToken.Sha512.Hash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Computes the hash value for the specified <paramref name="source"/>.
            </summary>
            <param name="source">The data to hash.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/>.</param>
        </member>
        <member name="M:JsonWebToken.Sha512.ComputeHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte})">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.ECJwk">
            <summary>
            Represents an Elliptic Curve JSON Web Key as defined in https://tools.ietf.org/html/rfc7518#section-6.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.#ctor(System.Security.Cryptography.ECParameters)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:JsonWebToken.ECJwk.#ctor(JsonWebToken.EllipticalCurve@,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.#ctor(JsonWebToken.EllipticalCurve@,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.#ctor(JsonWebToken.EllipticalCurve@,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.ECJwk"/>. No private key is provided.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.#ctor(JsonWebToken.EllipticalCurve@,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.ECJwk"/>. No private key is provided.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.#ctor(System.Security.Cryptography.ECParameters,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
            <param name="parameters"></param>
            <param name="alg"></param>
        </member>
        <member name="M:JsonWebToken.ECJwk.#ctor(JsonWebToken.EllipticalCurve@,System.Byte[],System.Byte[],System.Byte[],JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.#ctor(JsonWebToken.EllipticalCurve@,System.String,System.String,System.String,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.#ctor(JsonWebToken.EllipticalCurve@,System.Byte[],System.Byte[],JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.ECJwk"/>. No private key is provided.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.#ctor(JsonWebToken.EllipticalCurve@,System.String,System.String,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.ECJwk"/>. No private key is provided.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.#ctor(System.Security.Cryptography.ECParameters,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
            <param name="parameters"></param>
            <param name="alg"></param>
        </member>
        <member name="M:JsonWebToken.ECJwk.#ctor(JsonWebToken.EllipticalCurve@,System.Byte[],System.Byte[],System.Byte[],JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.#ctor(JsonWebToken.EllipticalCurve@,System.String,System.String,System.String,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.#ctor(JsonWebToken.EllipticalCurve@,System.Byte[],System.Byte[],JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.ECJwk"/>. No private key is provided.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.#ctor(JsonWebToken.EllipticalCurve@,System.String,System.String,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.ECJwk"/>. No private key is provided.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
        </member>
        <member name="P:JsonWebToken.ECJwk.Kty">
            <inheritsdoc />
        </member>
        <member name="P:JsonWebToken.ECJwk.Crv">
            <summary>
            Gets or sets the 'crv' (Curve).
            </summary>
        </member>
        <member name="P:JsonWebToken.ECJwk.X">
            <summary>
            Gets or sets the 'x' (X Coordinate).
            </summary>
        </member>
        <member name="P:JsonWebToken.ECJwk.Y">
            <summary>
            Gets or sets the 'y' (Y Coordinate).
            </summary>
        </member>
        <member name="P:JsonWebToken.ECJwk.KeySizeInBits">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.ECJwk.CreateECDsa(JsonWebToken.SignatureAlgorithm,System.Boolean)">
            <summary>
            Creates an <see cref="T:System.Security.Cryptography.ECDsa"/> algorithm.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.SupportSignature(JsonWebToken.SignatureAlgorithm)">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.ECJwk.SupportKeyManagement(JsonWebToken.KeyManagementAlgorithm)">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.ECJwk.SupportEncryption(JsonWebToken.EncryptionAlgorithm)">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.ECJwk.CreateSigner(JsonWebToken.SignatureAlgorithm)">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.ECJwk.CreateKeyWrapper(JsonWebToken.EncryptionAlgorithm,JsonWebToken.KeyManagementAlgorithm)">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.ECJwk.CreateKeyUnwrapper(JsonWebToken.EncryptionAlgorithm,JsonWebToken.KeyManagementAlgorithm)">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.ECJwk.ExportParameters">
            <summary>
            Exports the key parameters.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.ExportParameters(System.Boolean)">
            <summary>
            Exports the key parameters.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.GeneratePrivateKey(JsonWebToken.EllipticalCurve@)">
            <summary>
            Generates a private <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
            <param name="curve"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.ECJwk.GeneratePublicKey(JsonWebToken.EllipticalCurve@)">
            <summary>
            Generates a public <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
            <param name="curve"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.ECJwk.GenerateKey(JsonWebToken.EllipticalCurve@,System.Boolean)">
            <summary>
            Generates a <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
            <param name="curve"></param>
            <param name="withPrivateKey"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.ECJwk.GenerateKey(JsonWebToken.EllipticalCurve@,System.Boolean,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Generates a <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
            <param name="curve"></param>
            <param name="withPrivateKey"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.ECJwk.GenerateKey(JsonWebToken.EllipticalCurve@,System.Boolean,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Generates a <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
            <param name="curve"></param>
            <param name="withPrivateKey"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.ECJwk.Canonicalize(System.Buffers.IBufferWriter{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.ECJwk.FromParameters(System.Security.Cryptography.ECParameters,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.FromParameters(System.Security.Cryptography.ECParameters,JsonWebToken.KeyManagementAlgorithm,System.Boolean)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.FromParameters(System.Security.Cryptography.ECParameters,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.FromParameters(System.Security.Cryptography.ECParameters,JsonWebToken.SignatureAlgorithm,System.Boolean)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.FromParameters(System.Security.Cryptography.ECParameters)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.FromParameters(System.Security.Cryptography.ECParameters,System.Boolean)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.AsSpan">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.ECJwk.FromJwtObject(JsonWebToken.JwtObject)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.ECJwk.FromPem(System.String)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.ECJwk"/>.
            </summary>
            <param name="pem">A PEM-encoded key in PKCS1 (BEGIN EC PRIVATE KEY) or PKCS8 (BEGIN PUBLIC/PRIVATE KEY) format.</param>
            Support unencrypted PKCS#1 private EC key, unencrypted PKCS#8 public EC key and unencrypted PKCS#8 private EC key. 
            Unencrypted PKCS#1 public EC key is not supported.
            Password-protected key is not supported.
        </member>
        <member name="M:JsonWebToken.ECJwk.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.ECJwk.Equals(JsonWebToken.Jwk)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.ECJwk.GetHashCode">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.ECJwk.Dispose">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.EllipticalCurve">
            <summary>
            Constants for JsonWebKey Elliptical Curve Types
            https://tools.ietf.org/html/rfc7518#section-6.2.1.1
            </summary>
        </member>
        <member name="F:JsonWebToken.EllipticalCurve.P256">
            <summary>
            'P-256'.
            </summary>
        </member>
        <member name="F:JsonWebToken.EllipticalCurve.P384">
            <summary>
            'P-384'.
            </summary>
        </member>
        <member name="F:JsonWebToken.EllipticalCurve.P521">
            <summary>
            'P-521'.
            </summary>    
        </member>
        <member name="F:JsonWebToken.EllipticalCurve.Secp256k1">
            <summary>
            'secp256k1'.
            </summary>    
        </member>
        <member name="M:JsonWebToken.EllipticalCurve.#ctor(System.Byte,System.Security.Cryptography.ECCurve,System.Byte[],System.Int32,System.Int32,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.EllipticalCurve"/> struct.
            </summary>
            <param name="id"></param>
            <param name="namedCurve"></param>
            <param name="name"></param>
            <param name="keySizeInBits"></param>
            <param name="hashSize"></param>
            <param name="supportedSignatureAlgorithm"></param>
        </member>
        <member name="F:JsonWebToken.EllipticalCurve.Name">
            <summary>
            The name of the curve.
            </summary>
        </member>
        <member name="F:JsonWebToken.EllipticalCurve.Id">
            <summary>
            The internal id of the curve.
            </summary>
        </member>
        <member name="F:JsonWebToken.EllipticalCurve.KeySizeInBits">
            <summary>
            The size of the key, in bits
            </summary>
        </member>
        <member name="F:JsonWebToken.EllipticalCurve.CurveParameters">
            <summary>
            The parameters curve.
            </summary>
        </member>
        <member name="F:JsonWebToken.EllipticalCurve.HashSize">
            <summary>
            The size of the resulting hash.
            </summary>
        </member>
        <member name="F:JsonWebToken.EllipticalCurve.SupportedSignatureAlgorithm">
            <summary>
            The supported <see cref="T:JsonWebToken.SignatureAlgorithm"/> for this curve.
            </summary>
        </member>
        <member name="M:JsonWebToken.EllipticalCurve.FromString(System.String)">
            <summary>
            Returns the <see cref="T:JsonWebToken.EllipticalCurve"/> corresponding to the <paramref name="crv"/>.
            </summary>
            <param name="crv"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.EllipticalCurve.FromSpan(System.ReadOnlySpan{System.Byte})">
            <summary>
            Returns the <see cref="T:JsonWebToken.EllipticalCurve"/> corresponding to the <paramref name="crv"/>.
            </summary>
            <param name="crv"></param>
            <returns></returns>
        </member>
        <member name="T:JsonWebToken.EmptyKeyProvider">
            <summary>
            Represents a static provider of keys.
            </summary>
        </member>
        <member name="M:JsonWebToken.EmptyKeyProvider.GetKeys(JsonWebToken.JwtHeader)">
            <summary>
            Gets the list of <see cref="T:JsonWebToken.Jwk"/>.
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="T:JsonWebToken.EncodingContext">
            <summary>
            Encapsulate the context required for a JWT encoding.
            </summary>
        </member>
        <member name="M:JsonWebToken.EncodingContext.#ctor(System.Buffers.IBufferWriter{System.Byte},JsonWebToken.JsonHeaderCache,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.EncodingContext"/> class.
            </summary>
            <param name="bufferWriter"></param>
            <param name="headerCache"></param>
            <param name="tokenLifetimeInSeconds"></param>
            <param name="generateIssuedTime"></param>
        </member>
        <member name="P:JsonWebToken.EncodingContext.BufferWriter">
            <summary>
            Gets the <see cref="T:System.Buffers.IBufferWriter`1"/> used to write data.
            </summary>
        </member>
        <member name="P:JsonWebToken.EncodingContext.HeaderCache">
            <summary>
            Gets the JSON header cache.
            </summary>
        </member>
        <member name="P:JsonWebToken.EncodingContext.TokenLifetimeInSeconds">
            <summary>
            Gets the token lifetime, in seconds.
            </summary>
        </member>
        <member name="P:JsonWebToken.EncodingContext.GenerateIssuedTime">
            <summary>
            Gets whether the issuance time must be generated.
            </summary>
        </member>
        <member name="T:JsonWebToken.EncryptedJwtDescriptor`1">
            <summary>
            Defines an encrypted JWT with a <typeparamref name="TPayload"/> payload.
            </summary>
        </member>
        <member name="M:JsonWebToken.EncryptedJwtDescriptor`1.#ctor(JsonWebToken.JwtObject,`0)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.EncryptedJwtDescriptor`1"/>.
            </summary>
            <param name="header"></param>
            <param name="payload"></param>
        </member>
        <member name="M:JsonWebToken.EncryptedJwtDescriptor`1.#ctor(`0)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.EncryptedJwtDescriptor`1"/>.
            </summary>
            <param name="payload"></param>
        </member>
        <member name="P:JsonWebToken.EncryptedJwtDescriptor`1.Algorithm">
            <summary>
            Gets or sets the algorithm header.
            </summary>
        </member>
        <member name="P:JsonWebToken.EncryptedJwtDescriptor`1.EncryptionAlgorithm">
            <summary>
            Gets or sets the encryption algorithm.
            </summary>
        </member>
        <member name="P:JsonWebToken.EncryptedJwtDescriptor`1.CompressionAlgorithm">
            <summary>
            Gets or sets the compression algorithm.
            </summary>
        </member>
        <member name="P:JsonWebToken.EncryptedJwtDescriptor`1.EncryptionKey">
            <summary>
            Gets the <see cref="T:JsonWebToken.Jwt"/> used.
            </summary>
        </member>
        <member name="M:JsonWebToken.EncryptedJwtDescriptor`1.EncryptToken(System.ReadOnlySpan{System.Byte},System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            Encrypt the token.
            </summary>
        </member>
        <member name="M:JsonWebToken.EncryptedJwtDescriptor`1.OnKeyChanged(JsonWebToken.Jwk)">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.EncryptionAlgorithm">
            <summary>
            Defines encryption algorithm.
            </summary>
        </member>
        <member name="P:JsonWebToken.EncryptionAlgorithm.EnabledAesInstructionSet">
            <summary>
            Defines whether the AES isntruction set is enabled. 
            </summary>
        </member>
        <member name="F:JsonWebToken.EncryptionAlgorithm.Aes128CbcHmacSha256">
            <summary>
            'A128CBC-HS256'
            </summary>
        </member>
        <member name="F:JsonWebToken.EncryptionAlgorithm.Aes192CbcHmacSha384">
            <summary>
            'A192CBC-HS384'
            </summary>
        </member>
        <member name="F:JsonWebToken.EncryptionAlgorithm.Aes256CbcHmacSha512">
            <summary>
            'A256CBC-HS512'
            </summary>
        </member>
        <member name="F:JsonWebToken.EncryptionAlgorithm.Aes128Gcm">
            <summary>
            'A128GCM'
            </summary>
        </member>
        <member name="F:JsonWebToken.EncryptionAlgorithm.Aes192Gcm">
            <summary>
            'A192GCM'
            </summary>
        </member>
        <member name="F:JsonWebToken.EncryptionAlgorithm.Aes256Gcm">
            <summary>
            'A256GCM'
            </summary>
        </member>
        <member name="P:JsonWebToken.EncryptionAlgorithm.Id">
            <summary>
            Gets the algorithm identifier. 
            </summary>
        </member>
        <member name="P:JsonWebToken.EncryptionAlgorithm.Category">
            <summary>
            Gets the algorithm category.
            </summary>
        </member>
        <member name="P:JsonWebToken.EncryptionAlgorithm.RequiredKeySizeInBytes">
            <summary>
            Gets the required key size, in bytes.
            </summary>
        </member>
        <member name="P:JsonWebToken.EncryptionAlgorithm.RequiredKeySizeInBits">
            <summary>
            Gets the required key size, in bits.
            </summary>
        </member>
        <member name="P:JsonWebToken.EncryptionAlgorithm.KeyWrappedSizeInBytes">
            <summary>
            Gets the wrapped key size, in bits.
            </summary>
        </member>
        <member name="P:JsonWebToken.EncryptionAlgorithm.SignatureAlgorithm">
            <summary>
            Gets the <see cref="P:JsonWebToken.EncryptionAlgorithm.SignatureAlgorithm"/>.
            </summary>
        </member>
        <member name="P:JsonWebToken.EncryptionAlgorithm.Name">
            <summary>
            Gets the name of the encryption algorithm.
            </summary>
        </member>
        <member name="P:JsonWebToken.EncryptionAlgorithm.Utf8Name">
            <summary>
            Gets the name of the signature algorithm.
            </summary>
        </member>
        <member name="P:JsonWebToken.EncryptionAlgorithm.Encryptor">
            <summary>
            Gets the <see cref="T:JsonWebToken.AuthenticatedEncryptor"/>.
            </summary>
        </member>
        <member name="P:JsonWebToken.EncryptionAlgorithm.Decryptor">
            <summary>
            Gets the <see cref="T:JsonWebToken.AuthenticatedDecryptor"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.EncryptionAlgorithm.#ctor(System.SByte,System.String,System.UInt16,JsonWebToken.SignatureAlgorithm,System.UInt16,JsonWebToken.EncryptionType)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.EncryptionAlgorithm"/>. 
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="requiredKeySizeInBytes"></param>
            <param name="signatureAlgorithm"></param>
            <param name="requiredKeyWrappedSizeInBytes"></param>
            <param name="category"></param>
        </member>
        <member name="M:JsonWebToken.EncryptionAlgorithm.TryParseSlow(System.Text.Json.Utf8JsonReader@,JsonWebToken.EncryptionAlgorithm@)">
            <summary>
            Parse the current value of the <see cref="T:System.Text.Json.Utf8JsonReader"/> into its <see cref="T:JsonWebToken.EncryptionAlgorithm"/> representation.
            </summary>
            <param name="reader"></param>
            <param name="algorithm"></param>
        </member>
        <member name="M:JsonWebToken.EncryptionAlgorithm.TryParse(System.ReadOnlySpan{System.Byte},JsonWebToken.EncryptionAlgorithm@)">
            <summary>
            Cast the <see cref="T:System.ReadOnlySpan`1"/> into its <see cref="T:JsonWebToken.EncryptionAlgorithm"/> representation.
            </summary>
            <param name="value"></param>
            <param name="algorithm"></param>
        </member>
        <member name="M:JsonWebToken.EncryptionAlgorithm.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a
            <see cref="T:JsonWebToken.EncryptionAlgorithm"/> object, have the same value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.EncryptionAlgorithm.Equals(JsonWebToken.EncryptionAlgorithm)">
            <summary>
            Determines whether two specified <see cref="T:JsonWebToken.EncryptionAlgorithm"/> objects have the same value.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.EncryptionAlgorithm.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:JsonWebToken.EncryptionAlgorithm"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.EncryptionAlgorithm.op_Equality(JsonWebToken.EncryptionAlgorithm,JsonWebToken.EncryptionAlgorithm)">
            <summary>
            Determines whether two specified <see cref="T:JsonWebToken.EncryptionAlgorithm"/> have the same value.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.EncryptionAlgorithm.op_Inequality(JsonWebToken.EncryptionAlgorithm,JsonWebToken.EncryptionAlgorithm)">
            <summary>
            Determines whether two specified <see cref="T:JsonWebToken.EncryptionAlgorithm"/> have different values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.EncryptionAlgorithm.op_Explicit(JsonWebToken.EncryptionAlgorithm)~System.String">
            <summary>
            Cast the <see cref="T:JsonWebToken.EncryptionAlgorithm"/> into its <see cref="T:System.String"/> representation.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.EncryptionAlgorithm.op_Explicit(JsonWebToken.EncryptionAlgorithm)~System.Byte[]">
            <summary>
            Cast the <see cref="T:JsonWebToken.EncryptionAlgorithm"/> into its <see cref="T:System.Byte"/> array representation.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.EncryptionAlgorithm.op_Explicit(System.Byte[])~JsonWebToken.EncryptionAlgorithm">
            <summary>
            Cast the array of <see cref="T:System.Byte"/>s into its <see cref="T:JsonWebToken.EncryptionAlgorithm"/> representation.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.EncryptionAlgorithm.op_Explicit(System.String)~JsonWebToken.EncryptionAlgorithm">
            <summary>
            Cast the <see cref="T:System.String"/> into its <see cref="T:JsonWebToken.EncryptionAlgorithm"/> representation.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.EncryptionAlgorithm.ToString">
            <inheritsddoc />
        </member>
        <member name="M:JsonWebToken.EncryptionAlgorithm.ComputeKey(JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Computes a unique key for the combinaison of the <see cref="T:JsonWebToken.EncryptionAlgorithm"/> and the <see cref="T:JsonWebToken.KeyManagementAlgorithm"/>.
            </summary>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="T:JsonWebToken.EncryptionType">
            <summary>
            Defines the algorithm encryption types.
            </summary>
        </member>
        <member name="F:JsonWebToken.EncryptionType.NotSupported">
            <summary>
            Not supported encryption.
            </summary>
        </member>
        <member name="F:JsonWebToken.EncryptionType.Aes">
            <summary>
            AES encryption.
            </summary>
        </member>
        <member name="F:JsonWebToken.EncryptionType.AesHmac">
            <summary>
            AES-HMAC encryption.
            </summary>
        </member>
        <member name="F:JsonWebToken.EncryptionType.AesGcm">
            <summary>
            AES-GCM encryption.
            </summary>
        </member>
        <member name="T:JsonWebToken.HttpDocumentRetriever">
            <summary>
            Retrieves metadata information using <see cref="T:System.Net.Http.HttpClient"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.HttpDocumentRetriever.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.HttpDocumentRetriever"/> class.
            </summary>
        </member>
        <member name="M:JsonWebToken.HttpDocumentRetriever.#ctor(System.Net.Http.HttpMessageHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.HttpDocumentRetriever"/> class with a specified httpClient.
            </summary>
            <param name="handler"><see cref="T:System.Net.Http.HttpMessageHandler"/></param>
        </member>
        <member name="P:JsonWebToken.HttpDocumentRetriever.RequireHttps">
            <summary>
            Requires Https secure channel for sending requests.. This is turned ON by default for security reasons. It is RECOMMENDED that you do not allow retrieval from http addresses by default.
            </summary>
        </member>
        <member name="M:JsonWebToken.HttpDocumentRetriever.GetDocument(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a task which contains a string converted from remote document when completed, by using the provided address.
            </summary>
            <param name="address">Location of document</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation. <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>Document as a string</returns>
        </member>
        <member name="M:JsonWebToken.HttpDocumentRetriever.Dispose">
            <summary>
            Release managed resources.
            </summary>
        </member>
        <member name="T:JsonWebToken.HttpKeyProvider">
            <summary>
            Defines a <see cref="T:JsonWebToken.IKeyProvider"/> that gets the keys from and HTTP endpoint.
            </summary>
        </member>
        <member name="F:JsonWebToken.HttpKeyProvider.DefaultAutomaticRefreshInterval">
            <summary>
            1 day is the default time interval that afterwards, <see cref="M:JsonWebToken.HttpKeyProvider.GetKeys(JsonWebToken.JwtHeader,System.String)"/> will obtain new configuration.
            </summary>
        </member>
        <member name="F:JsonWebToken.HttpKeyProvider.DefaultRefreshInterval">
            <summary>
            30 seconds is the default time interval to obtain a new key set.
            </summary>
        </member>
        <member name="P:JsonWebToken.HttpKeyProvider.RefreshInterval">
            <summary>
            Time interval to obtain a new key set.
            </summary>  
        </member>
        <member name="P:JsonWebToken.HttpKeyProvider.AutomaticRefreshInterval">
            <summary>
            Time interval that afterwards, <see cref="M:JsonWebToken.HttpKeyProvider.GetKeys(JsonWebToken.JwtHeader,System.String)"/> will obtain new configuration.
            </summary>
        </member>
        <member name="M:JsonWebToken.HttpKeyProvider.#ctor(JsonWebToken.HttpDocumentRetriever)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.HttpKeyProvider"/>.
            </summary>
            <param name="documentRetriever"></param>
        </member>
        <member name="M:JsonWebToken.HttpKeyProvider.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.HttpKeyProvider"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.HttpKeyProvider.GetKeys(JsonWebToken.JwtHeader)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.HttpKeyProvider.DeserializeKeySet(System.String)">
            <summary>
            Deserializes a JSON string representing a JWKS.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.HttpKeyProvider.GetKeys(JsonWebToken.JwtHeader,System.String)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.HttpKeyProvider.Dispose(System.Boolean)">
            <summary>
            Disposes the managed resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:JsonWebToken.HttpKeyProvider.Dispose">
            <summary>
            Disposes the managed resources.
            </summary>
        </member>
        <member name="T:JsonWebToken.IAlgorithm">
            <summary>
            Represents a cyrptographic algorithm.
            </summary>
        </member>
        <member name="P:JsonWebToken.IAlgorithm.Utf8Name">
            <summary>
            Gets the UTF8 byte array of the name of the algorithm.
            </summary>
        </member>
        <member name="P:JsonWebToken.IAlgorithm.Name">
            <summary>
            Gets the name of the algorithm.
            </summary>
        </member>
        <member name="T:JsonWebToken.ICriticalHeaderHandler">
            <summary>
            Represents an extension point for handling the critical header parameter.
            </summary>
        </member>
        <member name="M:JsonWebToken.ICriticalHeaderHandler.TryHandle(JsonWebToken.JwtHeader,System.String)">
            <summary>
            Tries to handle a 'crit' header parameter.
            </summary>
            <param name="header"></param>
            <param name="headerName"></param>
            <returns></returns>
        </member>
        <member name="T:JsonWebToken.IKeyProvider">
            <summary>
            Represents a provider of <see cref="T:JsonWebToken.Jwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.IKeyProvider.GetKeys(JsonWebToken.JwtHeader)">
            <summary>
            Gets a list of <see cref="T:JsonWebToken.Jwk"/>.
            </summary>
        </member>
        <member name="T:JsonWebToken.ITokenReplayCache">
            <summary>
            Interface that defines a simple cache for tacking replaying of tokens.
            </summary>
        </member>
        <member name="M:JsonWebToken.ITokenReplayCache.TryAdd(JsonWebToken.Jwt,System.DateTime)">
            <summary>
            Try to add a token.
            </summary>
            <param name="jwtToken">the token to add.</param>
            <param name="expiresOn">the time when token expires.</param>
            <returns>true if the token was successfully added.</returns>
        </member>
        <member name="T:JsonWebToken.IValidator">
            <summary>
            Represents a validation to apply to a <see cref="T:JsonWebToken.TokenValidationContext"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.IValidator.TryValidate(JsonWebToken.Jwt)">
            <summary>
            Tries to validate a token.
            </summary>
        </member>
        <member name="T:JsonWebToken.JkuKeyProvider">
            <summary>
            Represents a <see cref="T:JsonWebToken.IKeyProvider"/> that retrieve the key set with the 'jku' header parameter.
            </summary>
        </member>
        <member name="M:JsonWebToken.JkuKeyProvider.#ctor(JsonWebToken.HttpDocumentRetriever)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.JkuKeyProvider"/>.
            </summary>
            <param name="documentRetriever"></param>
        </member>
        <member name="M:JsonWebToken.JkuKeyProvider.GetKeys(JsonWebToken.JwtHeader)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.JkuKeyProvider.DeserializeKeySet(System.String)">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.JsonHeaderCache">
            <summary>
            Represents a cache for JWT Header in JSON.
            </summary>
        </member>
        <member name="P:JsonWebToken.JsonHeaderCache.MaxSize">
            <summary>
            The maximum size of the cache.
            </summary>
        </member>
        <member name="M:JsonWebToken.JsonHeaderCache.TryGetHeader(JsonWebToken.JwtObject,JsonWebToken.SignatureAlgorithm,System.Byte[]@)">
            <summary>
             Try to get the header.
            </summary>
            <param name="header"></param>
            <param name="alg"></param>
            <param name="base64UrlHeader"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JsonHeaderCache.AddHeader(JsonWebToken.JwtObject,JsonWebToken.SignatureAlgorithm,System.ReadOnlySpan{System.Byte})">
            <summary>
            Adds a base64url encoded header to the cache.
            </summary>
            <param name="header"></param>
            <param name="alg"></param>
            <param name="base6UrlHeader"></param>
        </member>
        <member name="T:JsonWebToken.JweDescriptor">
            <summary>
            Defines an encrypted JWT with a <see cref="T:JsonWebToken.JwsDescriptor"/> payload.
            </summary>
        </member>
        <member name="M:JsonWebToken.JweDescriptor.#ctor">
            <summary>
            Initializes an new instance of <see cref="T:JsonWebToken.JweDescriptor`1"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.JweDescriptor.#ctor(JsonWebToken.JwtObject,JsonWebToken.JwsDescriptor)">
            <summary>
            Initializes an new instance of <see cref="T:JsonWebToken.JweDescriptor`1"/>.
            </summary>
            <param name="header"></param>
            <param name="payload"></param>
        </member>
        <member name="M:JsonWebToken.JweDescriptor.#ctor(JsonWebToken.JwsDescriptor)">
            <summary>
            Initializes an new instance of <see cref="T:JsonWebToken.JweDescriptor`1"/>.
            </summary>
            <param name="payload"></param>
        </member>
        <member name="M:JsonWebToken.JweDescriptor.Validate">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.JweDescriptor`1">
            <summary>
            Defines an encrypted JWT with a <typeparamref name="TDescriptor"/> as payload.
            </summary>
        </member>
        <member name="M:JsonWebToken.JweDescriptor`1.#ctor">
            <summary>
            Initializes an new instance of <see cref="T:JsonWebToken.JweDescriptor"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.JweDescriptor`1.#ctor(`0)">
            <summary>
            Initializes an new instance of <see cref="T:JsonWebToken.JweDescriptor"/>.
            </summary>
            <param name="payload"></param>
        </member>
        <member name="M:JsonWebToken.JweDescriptor`1.#ctor(JsonWebToken.JwtObject,`0)">
            <summary>
            Initializes an new instance of <see cref="T:JsonWebToken.JweDescriptor"/>.
            </summary>
            <param name="header"></param>
            <param name="payload"></param>
        </member>
        <member name="M:JsonWebToken.JweDescriptor`1.Encode(JsonWebToken.EncodingContext)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.JweDescriptor`1.Validate">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.Jwk">
            <summary>
            Represents a JSON Web Key as defined in http://tools.ietf.org/html/rfc7517.
            </summary>
        </member>
        <member name="F:JsonWebToken.Jwk.Empty">
            <summary>
            An empty <see cref="T:JsonWebToken.Jwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.Jwk.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.Jwk"/> class.
            </summary>
        </member>
        <member name="M:JsonWebToken.Jwk.#ctor(JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.Jwk"/> class.
            </summary>
            <param name="alg"></param>
        </member>
        <member name="M:JsonWebToken.Jwk.#ctor(JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.Jwk"/> class.
            </summary>
            <param name="alg"></param>
        </member>
        <member name="P:JsonWebToken.Jwk.Alg">
            <summary>
            Gets or sets the 'alg' (KeyType).
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwk.KeyOps">
            <summary>
            Gets the 'key_ops' (Key Operations).
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwk.Kid">
            <summary>
            Gets or sets the 'kid' (Key ID).
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwk.Kty">
            <summary>
            Gets or sets the 'kty' (Key Type).
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwk.Use">
            <summary>
            Gets or sets the 'use' (Public Key Use).
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwk.X5c">
            <summary>
            Gets the 'x5c' collection (X.509 Certificate Chain).
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwk.X5t">
            <summary>
            Gets or sets the 'x5t' (X.509 Certificate SHA-1 thumbprint).
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwk.X5tS256">
            <summary>
            Gets or sets the 'x5t#S256' (X.509 Certificate SHA-256 thumbprint).
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwk.X5u">
            <summary>
            Gets or sets the 'x5u' (X.509 URL).
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwk.KeySizeInBits">
            <summary>
            Gets the key size of <see cref="T:JsonWebToken.Jwk"/>.
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwk.X509CertificateChain">
            <summary>
            Gets the X.509 certificate chain.
            </summary>
        </member>
        <member name="M:JsonWebToken.Jwk.SupportSignature(JsonWebToken.SignatureAlgorithm)">
            <summary>
            Determines if the <see cref="T:JsonWebToken.Jwk"/> supports the <paramref name="algorithm"/>.
            </summary>
            <param name="algorithm">The <see cref="P:JsonWebToken.Jwk.SignatureAlgorithm"/> to verify.</param>
            <returns><c>true</c> if the key support the algorithm; otherwise <c>false</c></returns>
        </member>
        <member name="M:JsonWebToken.Jwk.SupportKeyManagement(JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Determines if the <see cref="T:JsonWebToken.Jwk"/> supports the <paramref name="algorithm"/>.
            </summary>
            <param name="algorithm">The <see cref="P:JsonWebToken.Jwk.KeyManagementAlgorithm"/> to verify.</param>
            <returns><c>true</c> if the key support the algorithm; otherwise <c>false</c></returns>
        </member>
        <member name="M:JsonWebToken.Jwk.SupportEncryption(JsonWebToken.EncryptionAlgorithm)">
            <summary>
            Determines if the <see cref="T:JsonWebToken.Jwk"/> supports the <paramref name="algorithm"/>.
            </summary>
            <param name="algorithm">The <see cref="T:JsonWebToken.EncryptionAlgorithm"/> to verify.</param>
            <returns><c>true</c> if the key support the algorithm; otherwise <c>false</c></returns>
        </member>
        <member name="M:JsonWebToken.Jwk.ToString">
            <summary>
            Returns a string that represents the <see cref="T:JsonWebToken.Jwk"/> in JSON.
            </summary>
        </member>
        <member name="M:JsonWebToken.Jwk.Serialize(System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            Serializes the <see cref="T:JsonWebToken.Jwk"/> into its JSON representation.
            </summary>
            <param name="bufferWriter"></param>
        </member>
        <member name="M:JsonWebToken.Jwk.AsSpan">
            <summary>
            Provides the binary representation of the key.
            </summary>
        </member>
        <member name="M:JsonWebToken.Jwk.CreateSigner(JsonWebToken.SignatureAlgorithm)">
            <summary>
            Creates a fresh new <see cref="T:JsonWebToken.Signer"/> with the current <see cref="T:JsonWebToken.Jwk"/> as key.
            </summary>
            <param name="algorithm">The <see cref="P:JsonWebToken.Jwk.SignatureAlgorithm"/> used for the signatures.</param>
        </member>
        <member name="M:JsonWebToken.Jwk.TryGetSigner(JsonWebToken.SignatureAlgorithm,JsonWebToken.Signer@)">
            <summary>
            Tries to provide a <see cref="T:JsonWebToken.Signer"/> with the current <see cref="T:JsonWebToken.Jwk"/> as key.
            </summary>
            <param name="algorithm">The <see cref="P:JsonWebToken.Jwk.SignatureAlgorithm"/> used for the signatures.</param>
            <param name="signer">The created <see cref="T:JsonWebToken.Signer"/>.</param>
            <returns><c>true</c> if the <paramref name="signer"/> is available for the requested <paramref name="algorithm"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:JsonWebToken.Jwk.TryGetKeyWrapper(JsonWebToken.EncryptionAlgorithm,JsonWebToken.KeyManagementAlgorithm,JsonWebToken.KeyWrapper@)">
            <summary>
            Tries to provide a <see cref="T:JsonWebToken.KeyWrapper"/> with the current <see cref="T:JsonWebToken.Jwk"/> as key.
            </summary>
            <param name="encryptionAlgorithm">The <see cref="T:JsonWebToken.EncryptionAlgorithm"/> used for key wrapping.</param>
            <param name="algorithm">The <see cref="P:JsonWebToken.Jwk.KeyManagementAlgorithm"/> used for key wrapping.</param>
            <param name="keyWrapper">The provided <see cref="T:JsonWebToken.KeyWrapper"/>. <c>null</c> if return <c>false</c></param>
        </member>
        <member name="M:JsonWebToken.Jwk.TryGetKeyUnwrapper(JsonWebToken.EncryptionAlgorithm,JsonWebToken.KeyManagementAlgorithm,JsonWebToken.KeyUnwrapper@)">
            <summary>
            Tries to provide a <see cref="T:JsonWebToken.KeyUnwrapper"/> with the current <see cref="T:JsonWebToken.Jwk"/> as key.
            </summary>
            <param name="encryptionAlgorithm">The <see cref="T:JsonWebToken.EncryptionAlgorithm"/> used for key wrapping.</param>
            <param name="algorithm">The <see cref="P:JsonWebToken.Jwk.KeyManagementAlgorithm"/> used for key wrapping.</param>
            <param name="keyUnwrapper">The provided <see cref="T:JsonWebToken.KeyUnwrapper"/>. <c>null</c> if return <c>false</c></param>
        </member>
        <member name="M:JsonWebToken.Jwk.CreateKeyWrapper(JsonWebToken.EncryptionAlgorithm,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Creates a fresh new <see cref="T:JsonWebToken.KeyWrapper"/> with the current <see cref="T:JsonWebToken.Jwk"/> as key.
            </summary>
            <param name="encryptionAlgorithm">The <see cref="T:JsonWebToken.EncryptionAlgorithm"/> used for key wrapping.</param>
            <param name="algorithm">The <see cref="P:JsonWebToken.Jwk.KeyManagementAlgorithm"/> used for key wrapping.</param>
        </member>
        <member name="M:JsonWebToken.Jwk.CreateKeyUnwrapper(JsonWebToken.EncryptionAlgorithm,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Creates a fresh new <see cref="T:JsonWebToken.KeyUnwrapper"/> with the current <see cref="T:JsonWebToken.Jwk"/> as key.
            </summary>
            <param name="encryptionAlgorithm">The <see cref="T:JsonWebToken.EncryptionAlgorithm"/> used for key wrapping.</param>
            <param name="algorithm">The <see cref="P:JsonWebToken.Jwk.KeyManagementAlgorithm"/> used for key unwrapping.</param>
        </member>
        <member name="M:JsonWebToken.Jwk.Canonicalize">
            <summary>
            Returns a new <see cref="T:JsonWebToken.Jwk"/> in its normal form, as defined by https://tools.ietf.org/html/rfc7638#section-3.2
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.Jwk.Canonicalize(System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            Returns a new <see cref="T:JsonWebToken.Jwk"/> in its normal form, as defined by https://tools.ietf.org/html/rfc7638#section-3.2
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.Jwk.ComputeThumbprint">
            <summary>
            Compute a hash as defined by https://tools.ietf.org/html/rfc7638.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.Jwk.ComputeThumbprint(System.Span{System.Byte})">
            <summary>
            Compute a hash as defined by https://tools.ietf.org/html/rfc7638.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.Jwk.FromX509Certificate(System.Security.Cryptography.X509Certificates.X509Certificate2,JsonWebToken.SignatureAlgorithm,System.Boolean)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.AsymmetricJwk"/>.
            </summary>
            <param name="certificate">A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> that contains JSON Web Key parameters.</param>
            <param name="alg">A <see cref="P:JsonWebToken.Jwk.SignatureAlgorithm"/> that identify the 'alg' JWK parameter.</param>
            <param name="withPrivateKey">Determines if the private key must be extracted from the certificate.</param>
        </member>
        <member name="M:JsonWebToken.Jwk.FromX509Certificate(System.Security.Cryptography.X509Certificates.X509Certificate2,JsonWebToken.KeyManagementAlgorithm,System.Boolean)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.AsymmetricJwk"/>.
            </summary>
            <param name="certificate">A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> that contains JSON Web Key parameters.</param>
            <param name="alg">A <see cref="P:JsonWebToken.Jwk.KeyManagementAlgorithm"/> that identify the 'alg' JWK parameter.</param>
            <param name="withPrivateKey">Determines if the private key must be extracted from the certificate.</param>
        </member>
        <member name="M:JsonWebToken.Jwk.FromX509Certificate(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Boolean)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.AsymmetricJwk"/>.
            </summary>
            <param name="certificate">A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> that contains JSON Web Key parameters.</param>
            <param name="withPrivateKey">Determines if the private key must be extracted from the certificate.</param>
        </member>
        <member name="M:JsonWebToken.Jwk.FromJson(System.String)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.Jwk"/>.
            </summary>
            <param name="json">A string that contains JSON Web Key parameters in JSON format.</param>
            <returns><see cref="T:JsonWebToken.Jwk"/></returns>
        </member>
        <member name="M:JsonWebToken.Jwk.FromPem(System.String)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
            <param name="pem">A PEM-encoded key in PKCS1 or PKCS8 format.</param>
            <remarks>
            Support unencrypted PKCS#1 public RSA key, unencrypted PKCS#1 private RSA key, unencrypted PKCS#1 private EC key, 
            unencrypted PKCS#8 public RSA key, unencrypted PKCS#8 private RSA key, unencrypted PKCS#8 public EC key and unencrypted PKCS#8 private EC key. 
            Unencrypted PKCS#1 public EC key is not supported.
            Password-protected key is not supported.
            </remarks>
        </member>
        <member name="M:JsonWebToken.Jwk.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <summary>
            Writes the current <see cref="T:JsonWebToken.Jwk"/> into the <paramref name="writer"/>.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:JsonWebToken.Jwk.ComputeKid(JsonWebToken.Jwk)">
            <summary>
            Compute the 'kid' header parameter based on the JWK thumbprint.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:JsonWebToken.Jwk.Equals(JsonWebToken.Jwk)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Jwk.Dispose">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.Jwks">
            <summary>
            Contains a collection of <see cref="T:JsonWebToken.Jwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.Jwks.#ctor">
            <summary>
            Initializes an new instance of <see cref="T:JsonWebToken.Jwks"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.Jwks.#ctor(JsonWebToken.Jwk)">
            <summary>
            Initializes an new instance of <see cref="T:JsonWebToken.Jwks"/>.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:JsonWebToken.Jwks.#ctor(System.Collections.Generic.IList{JsonWebToken.Jwk})">
            <summary>
            Initializes an new instance of <see cref="T:JsonWebToken.Jwks"/>.
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwks.Item(System.String)">
            <summary>
            Gets or sets the first <see cref="T:JsonWebToken.Jwk"/> with its 'kid'.
            </summary>
        </member>
        <member name="M:JsonWebToken.Jwks.Add(JsonWebToken.Jwk)">
            <summary>
            Adds the <paramref name="key"/> to the JWKS.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:JsonWebToken.Jwks.Remove(JsonWebToken.Jwk)">
            <summary>
            Removes the <paramref name="key"/> from the JWKS.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:JsonWebToken.Jwks.ToString">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.Jwks.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <summary>Writes the current <see cref="T:JsonWebToken.Jwks"/> into a <see cref="T:System.Text.Json.Utf8JsonWriter"/>.</summary>
            <param name="writer"></param>
        </member>
        <member name="P:JsonWebToken.Jwks.Count">
            <summary>
            Gets the number of keys contained in the <see cref="T:JsonWebToken.Jwks"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.Jwks.GetKeys(System.String)">
            <summary>
            Gets the list of <see cref="T:JsonWebToken.Jwk"/> identified by the 'kid'.
            </summary>
            <param name="kid"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.Jwks.FromJson(System.String)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.Jwks"/>.
            </summary>
            <param name="json">a string that contains JSON Web Key parameters in JSON format.</param>
            <returns><see cref="T:JsonWebToken.Jwks"/></returns>
        </member>
        <member name="M:JsonWebToken.Jwks.FromJson(System.ReadOnlySpan{System.Byte})">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.Jwks"/>.
            </summary>
            <param name="json">a string that contains JSON Web Key parameters in JSON format.</param>
            <returns><see cref="T:JsonWebToken.Jwks"/></returns>
        </member>
        <member name="M:JsonWebToken.Jwks.Dispose">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.JwksKeyProvider">
            <summary>
            Represents a <see cref="T:JsonWebToken.IKeyProvider"/> that retrieve the key set with the 'jwk' header parameter.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwksKeyProvider.#ctor(System.String,JsonWebToken.HttpDocumentRetriever)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.JwksKeyProvider"/>.
            </summary>
            <param name="jwksAddress"></param>
            <param name="documentRetriever"></param>
        </member>
        <member name="M:JsonWebToken.JwksKeyProvider.#ctor(System.String,System.Net.Http.HttpMessageHandler)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.JwksKeyProvider"/>.
            </summary>
            <param name="jwksAddress"></param>
            <param name="handler"></param>
        </member>
        <member name="M:JsonWebToken.JwksKeyProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.JwksKeyProvider"/>.
            </summary>
            <param name="metadataAddress"></param>
        </member>
        <member name="M:JsonWebToken.JwksKeyProvider.GetKeys(JsonWebToken.JwtHeader)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.JwksKeyProvider.DeserializeKeySet(System.String)">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.JwsDescriptor">
            <summary>
            Defines a signed JWT with a JSON payload.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.JwsDescriptor"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.#ctor(JsonWebToken.JwtObject,JsonWebToken.JwtObject)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.JwsDescriptor"/>.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwsDescriptor.Algorithm">
            <summary>
            Gets or sets the algorithm header.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwsDescriptor.SigningKey">
            <summary>
            Gets the <see cref="T:JsonWebToken.Jwt"/> used.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwsDescriptor.Subject">
            <summary>
            Gets or sets the value of the 'sub' claim.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwsDescriptor.JwtId">
            <summary>
            Gets or sets the value of the 'jti' claim.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwsDescriptor.Audience">
            <summary>
            Gets or sets the value of the 'aud' claim.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwsDescriptor.Audiences">
            <summary>
            Gets or sets the value of the 'aud' claim.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwsDescriptor.ExpirationTime">
            <summary>
            Gets or sets the value of the 'exp' claim.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwsDescriptor.Issuer">
            <summary>
            Gets or sets the value of the 'iss' claim.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwsDescriptor.IssuedAt">
            <summary>
            Gets or sets the value of the 'iat' claim.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwsDescriptor.NotBefore">
             <summary>
            Gets or sets the value of the 'nbf' claim.
             </summary>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddNullClaim(System.ReadOnlySpan{System.Byte})">
            <summary>
            Add a claim with the value <c>null</c>.
            </summary>
            <param name="utf8Name"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddNullClaim(System.String)">
            <summary>
            Add a claim with the value <c>null</c>.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.ReadOnlySpan{System.Byte},System.String)">
            <summary>
            Adds a claim.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.ReadOnlySpan{System.Byte},System.Int64)">
            <summary>
            Adds a claim.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.String,System.String)">
            <summary>
            Adds a claim.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.ReadOnlySpan{System.Byte},System.Nullable{System.Boolean})">
            <summary>
            Adds a claim.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.String,System.Nullable{System.Boolean})">
            <summary>
            Adds a claim.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.String,System.Int64)">
            <summary>
            Adds a claim.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.ReadOnlySpan{System.Byte},System.Nullable{System.DateTime})">
            <summary>
            Adds a claim.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.String,System.Nullable{System.DateTime})">
            <summary>
            Adds a claim.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Adds a claim.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.String,System.Int32)">
            <summary>
            Adds a claim.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Adds a claim.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.String,System.Boolean)">
            <summary>
            Adds a claim.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.ReadOnlySpan{System.Byte},JsonWebToken.JwtObject)">
            <summary>
            Adds a claim.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.String,JsonWebToken.JwtObject)">
            <summary>
            Adds a claim.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.ReadOnlySpan{System.Byte},JsonWebToken.JwtProperty)">
            <summary>
            Adds a claim.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.String,JsonWebToken.JwtProperty)">
            <summary>
            Adds a claim.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.String,JsonWebToken.JwtArray)">
            <summary>
            Adds a claim.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.ReadOnlySpan{System.Byte},JsonWebToken.JwtArray)">
            <summary>
            Adds a claim.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.ReadOnlySpan{System.Byte},System.Collections.Generic.List{System.String})">
            <summary>
            Add a claim as a list of <see cref="T:System.String"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.AddClaim(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Add a claim as a list of <see cref="T:System.String"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.SetClaimToNull(System.ReadOnlySpan{System.Byte})">
            <summary>
            Set a claim to null.
            </summary>
            <param name="utf8Name"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.SetClaimToNull(System.String)">
            <summary>
            Set a claim to null.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.GetStringClaim(System.ReadOnlySpan{System.Byte})">
            <summary>
            Gets a claim as <see cref="T:System.String"/>.
            </summary>
            <param name="utf8Name"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.GetStringClaim(System.String)">
            <summary>
            Gets a claim as <see cref="T:System.String"/>.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.GetInt32Claim(System.ReadOnlySpan{System.Byte})">
            <summary>
            Gets a claim as <see cref="T:System.Int32"/>.
            </summary>
            <param name="utf8Name"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.GetClaim``1(System.ReadOnlySpan{System.Byte})">
            <summary>
            Gets a claim as <typeparamref name="TClaim"/>.
            </summary>
            <param name="claimType"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.GetBoolClaim(System.ReadOnlySpan{System.Byte})">
            <summary>
            Gets a claim as <see cref="T:System.Boolean"/>.
            </summary>
            <param name="utf8Name"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.GetListClaims``1(System.ReadOnlySpan{System.Byte})">
            <summary>
            Gets a claim as a list of <see cref="T:System.String"/>.
            </summary>
            <param name="utf8Name"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.GetListClaims``1(System.String)">
            <summary>
            Gets a claim as a list of <see cref="T:System.String"/>.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.GetClaim(System.ReadOnlySpan{System.Byte})">
            <summary>
            Gets a claim as <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="claimType"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.GetDateTime(System.ReadOnlySpan{System.Byte})">
            <summary>
            Gets a claim as <see cref="T:System.DateTime"/>.
            </summary>
            <param name="utf8Name"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.Encode(JsonWebToken.EncodingContext)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.Validate">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.RequireClaim(System.ReadOnlySpan{System.Byte},JsonWebToken.JwtTokenType)">
            <summary>
            Validates the presence and the type of a required claim.
            </summary>
            <param name="utf8Name"></param>
            <param name="type"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.ValidateClaim(System.ReadOnlySpan{System.Byte},JsonWebToken.JwtTokenType[])">
            <summary>
            Validates the presence and the type of a required claim.
            </summary>
            <param name="utf8Name"></param>
            <param name="types"></param>
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.OnKeyChanged(JsonWebToken.Jwk)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.JwsDescriptor.GetEnumerator">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.Jwt">
            <summary>
            A JSON Web Token (JWT).
            </summary>
        </member>
        <member name="M:JsonWebToken.Jwt.#ctor(JsonWebToken.Jwt)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.Jwt"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.Jwt.Create(JsonWebToken.JwtHeader,JsonWebToken.Jwt,JsonWebToken.Jwk)">
            <summary>
            Creates a new instance of <see cref="T:JsonWebToken.Jwt"/>.
            </summary>
            <param name="header"></param>
            <param name="nestedToken"></param>
            <param name="encryptionKey"></param>
        </member>
        <member name="M:JsonWebToken.Jwt.Create(JsonWebToken.JwtHeader,System.Byte[],JsonWebToken.Jwk)">
            <summary>
            Creates a new instance of <see cref="T:JsonWebToken.Jwt"/>.
            </summary>
            <param name="header"></param>
            <param name="data"></param>
            <param name="encryptionKey"></param>
        </member>
        <member name="M:JsonWebToken.Jwt.Create(JsonWebToken.JwtHeader,JsonWebToken.JwtPayload,JsonWebToken.Jwk)">
            <summary>
            Creates a new instance of <see cref="T:JsonWebToken.Jwt"/>.
            </summary>
            <param name="header"></param>
            <param name="payload"></param>
            <param name="signingKey"></param>
        </member>
        <member name="P:JsonWebToken.Jwt.Audiences">
            <summary>
            Gets the list of 'aud' claim.
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwt.Header">
            <summary>
            Gets the <see cref="T:JsonWebToken.JwtHeader"/> associated with this instance if the token is signed.
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwt.Id">
            <summary>
            Gets the value of the 'jti' claim.
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwt.Issuer">
            <summary>
            Gets the value of the 'iss' claim.
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwt.Payload">
            <summary>
            Gets the <see cref="T:JsonWebToken.JwtPayload"/> associated with this instance.
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwt.NestedToken">
            <summary>
            Gets the nested <see cref="T:JsonWebToken.Jwt"/> associated with this instance.
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwt.SignatureAlgorithm">
            <summary>
            Gets the signature algorithm associated with this instance.
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwt.SigningKey">
            <summary>
            Gets the <see cref="T:JsonWebToken.Jwk"/> used for the signature of this token.
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwt.EncryptionKey">
            <summary>
            Gets the <see cref="T:JsonWebToken.Jwk"/> used for the encryption of this token.
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwt.Subject">
            <summary>
            Gets the value of the 'sub'.
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwt.NotBefore">
            <summary>
            Gets the'value of the 'nbf'.
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwt.ExpirationTime">
            <summary>
            Gets the value of the 'exp' claim.
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwt.IssuedAt">
            <summary>
            Gets the value of the 'iat' claim.
            </summary>
            <remarks>If the 'expiration' claim is not found, then <see cref="F:System.DateTime.MinValue"/> is returned.</remarks>
        </member>
        <member name="P:JsonWebToken.Jwt.Plaintext">
            <summary>
            Gets the plaintext of the JWE.
            </summary>
        </member>
        <member name="P:JsonWebToken.Jwt.Binary">
            <summary>
            Gets the binary data of the JWE.
            </summary>
        </member>
        <member name="M:JsonWebToken.Jwt.ToString">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.JwtArray">
            <summary>
            Represents a JSON array.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtArray.#ctor(System.Collections.Generic.List{JsonWebToken.JwtValue})">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.JwtArray"/> class.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:JsonWebToken.JwtArray.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.JwtArray"/> class.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:JsonWebToken.JwtArray.ToList">
            <summary>
            Exports the <see cref="T:System.Collections.Generic.List`1"/> use as back storage.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JsonWebToken.JwtArray.Count">
            <summary>
            Gets the number of <see cref="T:JsonWebToken.JwtValue"/>s contained in the <see cref="T:JsonWebToken.JwtArray"/>.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtArray.Item(System.Int32)">
            <summary>
             Gets the <see cref="T:JsonWebToken.JwtValue"/> at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtArray.Add(JsonWebToken.JwtValue)">
            <summary>
            Adds an <see cref="T:JsonWebToken.JwtValue"/> to the end of the <see cref="T:JsonWebToken.JwtArray"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtArray.Add(System.String)">
            <summary>
            Adds an <see cref="T:System.String"/> to the end of the <see cref="T:JsonWebToken.JwtArray"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtArray.Add(System.Boolean)">
            <summary>
            Adds an <see cref="T:System.Boolean"/> to the end of the <see cref="T:JsonWebToken.JwtArray"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtArray.Add(System.Int64)">
            <summary>
            Adds an <see cref="T:System.Int64"/> to the end of the <see cref="T:JsonWebToken.JwtArray"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtArray.Add(JsonWebToken.JwtArray)">
            <summary>
            Adds an <see cref="T:JsonWebToken.JwtArray"/> to the end of the <see cref="T:JsonWebToken.JwtArray"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtArray.Add(JsonWebToken.JwtObject)">
            <summary>
            Adds an <see cref="T:JsonWebToken.JwtObject"/> to the end of the <see cref="T:JsonWebToken.JwtArray"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtArray.Add(System.Double)">
            <summary>
            Adds an <see cref="T:System.Double"/> to the end of the <see cref="T:JsonWebToken.JwtArray"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtArray.Merge(JsonWebToken.JwtArray)">
            <summary>
            Merge the <paramref name="other"/> into this <see cref="T:JsonWebToken.JwtArray"/>.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:JsonWebToken.JwtArray.GetEnumerator">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.JwtDescriptor">
            <summary>
            Defines an abstract class for representing a JWT.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.JwtDescriptor"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor.#ctor(JsonWebToken.JwtObject)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.JwtDescriptor"/>.
            </summary>
            <param name="header"></param>
        </member>
        <member name="P:JsonWebToken.JwtDescriptor.Header">
            <summary>
            Gets the parameters header.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtDescriptor.Key">
            <summary>
            Gets the <see cref="T:JsonWebToken.Jwt"/> used.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor.OnKeyChanged(JsonWebToken.Jwk)">
            <summary>
            Called when the key is set.
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:JsonWebToken.JwtDescriptor.KeyId">
            <summary>
            Gets or sets the key identifier header parameter.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtDescriptor.JwkSetUrl">
            <summary>
            Gets or sets the JWKS URL header parameter.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtDescriptor.X509Url">
            <summary>
            Gets or sets the X509 URL header parameter.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtDescriptor.X509CertificateChain">
            <summary>
            Gets or sets the X509 certification chain header.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtDescriptor.X509CertificateSha1Thumbprint">
            <summary>
            Gets or sets the X509 certificate SHA-1 thumbprint header parameter.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtDescriptor.Type">
            <summary>
            Gets or sets the JWT type 'typ' header parameter.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtDescriptor.ContentType">
            <summary>
            Gets or sets the content type header parameter.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtDescriptor.Critical">
            <summary>
            Gets or sets the critical header parameter.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor.Encode(JsonWebToken.EncodingContext)">
            <summary>
            Encodes the current <see cref="T:JsonWebToken.JwtDescriptor"/> into it <see cref="T:System.String"/> representation.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor.GetHeaderParameter``1(System.ReadOnlySpan{System.Byte})">
            <summary>
            Gets the header parameter for a specified header name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="utf8Name"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor.SetHeaderParameter(System.ReadOnlySpan{System.Byte},System.String)">
            <summary>
            Sets the header parameter for a specified header name.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor.SetHeaderParameter(System.ReadOnlySpan{System.Byte},System.Byte[])">
            <summary>
            Sets the header parameter for a specified header name.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor.SetHeaderParameter(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Sets the header parameter for a specified header name.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor.SetHeaderParameter(System.String,System.String)">
            <summary>
            Sets the header parameter for a specified header name.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor.SetHeaderParameter(System.ReadOnlySpan{System.Byte},System.Collections.Generic.List{System.String})">
            <summary>
            Sets the header parameter for a specified header name.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor.SetHeaderParameter(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Sets the header parameter for a specified header name.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor.GetHeaderParameters(System.ReadOnlySpan{System.Byte})">
            <summary>
            Gets the list of header parameters for a header name.
            </summary>
            <param name="utf8Name"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor.Validate">
            <summary>
            Validates the current <see cref="T:JsonWebToken.JwtDescriptor"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor.CheckRequiredHeader(System.ReadOnlySpan{System.Byte},JsonWebToken.JwtTokenType)">
            <summary>
            Validates the presence and the type of a required header.
            </summary>
            <param name="utf8Name"></param>
            <param name="type"></param>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor.CheckRequiredHeader(JsonWebToken.WellKnownProperty,JsonWebToken.JwtTokenType)">
            <summary>
            Validates the presence and the type of a required header.
            </summary>
            <param name="wellKnownName"></param>
            <param name="type"></param>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor.CheckRequiredHeader(System.ReadOnlySpan{System.Byte},JsonWebToken.JwtTokenType[])">
            <summary>
            Validates the presence and the type of a required header.
            </summary>
            <param name="utf8Name"></param>
            <param name="types"></param>
        </member>
        <member name="T:JsonWebToken.JwtDescriptorBuilder">
            <summary>
            A builder of <see cref="T:JsonWebToken.JwtDescriptor"/>. 
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.AddHeader(System.String,System.String)">
            <summary>
            Adds a header parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.AddHeader(System.String,System.Int64)">
            <summary>
            Adds a header parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.AddHeader(System.String,System.Boolean)">
            <summary>
            Adds a header parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.AddHeader(System.String,JsonWebToken.JwtArray)">
            <summary>
            Adds a header parameter.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.IssuedBy(System.String)">
            <summary>
            Defines the issuer.
            </summary>
            <param name="iss"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.ExpiresAt(System.DateTime)">
            <summary>
            Defines the expiration time.
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.ExpiresAfter(System.Int64)">
            <summary>
            Defines the sliding expiration time.
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.ExpiresAfter(System.TimeSpan)">
            <summary>
            Defines the sliding expiration time.
            </summary>
            <param name="after"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.NotBefore(System.DateTime)">
            <summary>
            Defines the "not before" claim.
            </summary>
            <param name="nbf"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.NotBefore(System.TimeSpan)">
            <summary>
            Defines the sliding "not before" claim.
            </summary>
            <param name="before"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.NotBefore(System.Int64)">
            <summary>
            Defines the sliding "not before" claim.
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.IssuedAt(System.DateTime)">
            <summary>
            Defines the issuance time claim.
            </summary>
            <param name="iat"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.AddClaim(System.String,System.String)">
            <summary>
            Adds a claim.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.AddClaim(System.String,System.Int32)">
            <summary>
            Adds a claim.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.AddClaim(System.String,System.Double)">
            <summary>
            Adds a claim.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.AddClaim(System.String,System.Int64)">
            <summary>
            Adds a claim.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.AddClaim(System.String,System.Single)">
            <summary>
            Adds a claim.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.AddClaim(System.String,System.Boolean)">
            <summary>
            Adds a claim.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.AddClaim(System.String,JsonWebToken.JwtObject)">
            <summary>
            Adds a claim.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.AddClaim(System.String,JsonWebToken.JwtArray)">
            <summary>
            Adds a claim.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.AddClaim(System.String,JsonWebToken.JwtProperty)">
            <summary>
            Adds a claim.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.Build">
            <summary>
            Build the <see cref="T:JsonWebToken.JwtDescriptor"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.PlaintextPayload(System.String)">
            <summary>
            Defines the plaintext as payload. 
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.BinaryPayload(System.Byte[])">
            <summary>
            Defines the binary data as payload.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.JsonPayload(JsonWebToken.JwtObject)">
            <summary>
            Defines the JSON as payload.
            </summary>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.EmptyJsonPayload">
            <summary>
            Ignore the signature requirement.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.KeyId(System.String)">
            <summary>
            Defines the key identifier.
            </summary>
            <param name="kid"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.JwkSetUrl(System.String)">
            <summary>
            Defines the JWKS URL.
            </summary>
            <param name="jku"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.Jwk(JsonWebToken.Jwk)">
            <summary>
            Defines the 'jwk' header.
            </summary>
            <param name="jwk"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.X509Url(System.String)">
            <summary>
            Defines the X509 URL.
            </summary>
            <param name="x5u"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.X509CertificateChain(System.Collections.Generic.List{System.String})">
            <summary>
            Defines the 509 certificate chain.
            </summary>
            <param name="x5c"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.X509CertificateSha1Thumbprint(System.String)">
            <summary>
            Defines the X509 certificate SHA-1 thumbprint.
            </summary>
            <param name="x5t"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.Type(System.String)">
            <summary>
            Defines the JWT type 'typ'.
            </summary>
            <param name="typ"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.ContentType(System.String)">
            <summary>
            Defines the content type 'cty'.
            </summary>
            <param name="cty"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.CriticalHeaders(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Defines the critical headers.
            </summary>
            <param name="crit"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.SignWith(JsonWebToken.Jwk)">
            <summary>
            Defines the <see cref="M:JsonWebToken.JwtDescriptorBuilder.Jwk(JsonWebToken.Jwk)"/> used as key for signature.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.SignWith(JsonWebToken.Jwk,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Defines the <see cref="M:JsonWebToken.JwtDescriptorBuilder.Jwk(JsonWebToken.Jwk)"/> used as key for signature.
            </summary>
            <param name="key"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.EncryptWith(JsonWebToken.Jwk,JsonWebToken.EncryptionAlgorithm)">
            <summary>
            Defines the <see cref="M:JsonWebToken.JwtDescriptorBuilder.Jwk(JsonWebToken.Jwk)"/> used as key for encryption.
            </summary>
            <param name="key"></param>
            <param name="encryptionAlgorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.EncryptWith(JsonWebToken.Jwk,JsonWebToken.EncryptionAlgorithm,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Defines the <see cref="M:JsonWebToken.JwtDescriptorBuilder.Jwk(JsonWebToken.Jwk)"/> used as key for encryption.
            </summary>
            <param name="key"></param>
            <param name="encryptionAlgorithm"></param>
            <param name="keyManagementAlgorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.IgnoreSignature">
            <summary>
            Ignore the signature requirement. It is not recommended to use unsecure JWT.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.WithAutomaticId">
            <summary>
            Generates a new id ('jti' claim) for each new descriptor build.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorBuilder.WithAutomaticIssuedAt">
            <summary>
            Generate the issuance time for each new descriptor build.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JsonWebToken.JwtDescriptorException">
            <summary>
            Represents an <see cref="T:System.Exception"/> caused by an error in the <see cref="T:JsonWebToken.JwtDescriptor"/>. 
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtDescriptorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.JwtDescriptorException"/>.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:JsonWebToken.JwtDescriptor`1">
            <summary>
            Defines an JWT with a <typeparamref name="TPayload"/> payload.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor`1.#ctor(JsonWebToken.JwtObject,`0)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.JwtDescriptor`1"/>.
            </summary>
            <param name="header"></param>
            <param name="payload"></param>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor`1.#ctor(`0)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.JwtDescriptor`1"/>.
            </summary>
            <param name="payload"></param>
        </member>
        <member name="P:JsonWebToken.JwtDescriptor`1.Payload">
            <summary>
            Gets or sets the payload.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtDescriptor`1.ToString">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.JwtHeader">
            <summary>
            Represents the cryptographic operations applied to the JWT and optionally 
            any additional properties of the JWT. 
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtHeader.#ctor(JsonWebToken.JwtObject)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.JwtHeader"/> class.
            </summary>
            <param name="inner"></param>
        </member>
        <member name="M:JsonWebToken.JwtHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.JwtHeader"/> class.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtHeader.FromJson(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.JwtHeader"/> class.
            </summary>
            <param name="json"></param>   
        </member>
        <member name="P:JsonWebToken.JwtHeader.Alg">
            <summary>
            Gets the signature algorithm that was used to create the signature.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeader.SignatureAlgorithm">
            <summary>
            Gets the signature algorithm (alg) that was used to create the signature.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeader.KeyManagementAlgorithm">
            <summary>
            Gets the key management algorithm (alg).
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeader.Cty">
            <summary>
            Gets the content type (Cty) of the token.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeader.Enc">
            <summary>
            Gets the encryption algorithm (enc) of the token.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeader.EncryptionAlgorithm">
            <summary>
            Gets the encryption algorithm (enc) of the token.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeader.Kid">
            <summary>
            Gets the key identifier for the key used to sign the token.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeader.Typ">
            <summary>
            Gets the mime type (Typ) of the token.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeader.X5t">
            <summary>
            Gets the thumbprint of the certificate used to sign the token.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeader.Jku">
            <summary>
            Gets the URL of the JWK used to sign the token.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeader.X5u">
            <summary>
            Gets the URL of the certificate used to sign the token
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeader.Zip">
            <summary>
            Gets the algorithm used to compress the token.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeader.CompressionAlgorithm">
            <summary>
            Gets the compression algorithm (zip) of the token.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeader.IV">
            <summary>
            Gets the Initialization Vector used for AES GCM encryption.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeader.Tag">
            <summary>
            Gets the Authentication Tag used for AES GCM encryption.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeader.Crit">
            <summary>
            Gets the Crit header.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeader.Epk">
            <summary>
            Gets the ephemeral key used for ECDH key agreement.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeader.Apu">
            <summary>
            Gets the Agreement PartyUInfo used for ECDH key agreement.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeader.Apv">
            <summary>
            Gets the Agreement PartyVInfo used for ECDH key agreement.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtHeader.TryGetValue(System.ReadOnlySpan{System.Byte},JsonWebToken.JwtProperty@)">
            <summary>
            Gets the <see cref="T:JsonWebToken.JwtProperty"/> associated with the specified key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:JsonWebToken.JwtHeader.Item(System.String)">
            <summary>
             Gets the claim for a specified key in the current <see cref="T:JsonWebToken.JwtPayload"/>.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtHeader.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:JsonWebToken.JwtHeader"/> contains the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtHeader.ToString">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.JwtHeaderCache">
            <summary>
            Represents a cache for <see cref="T:JsonWebToken.JwtHeader"/>.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeaderCache.MaxSize">
            <summary>
            The maximum size of the cache. 
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeaderCache.Head">
            <summary>
            The heade of the cache.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtHeaderCache.Tail">
            <summary>
            The tail of the cache.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtHeaderCache.TryGetHeader(System.ReadOnlySpan{System.Byte},JsonWebToken.JwtHeader@)">
            <summary>
            Try to get the <see cref="T:JsonWebToken.JwtHeader"/>.
            </summary>
            <param name="buffer"></param>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtHeaderCache.AddHeader(System.ReadOnlySpan{System.Byte},JsonWebToken.JwtHeader)">
            <summary>
            Adds the <see cref="T:JsonWebToken.JwtHeader"/> to the cache.
            </summary>
            <param name="rawHeader"></param>
            <param name="header"></param>
        </member>
        <member name="M:JsonWebToken.JwtHeaderCache.Validate">
            <summary>
            Validate the integrity of the cache.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JsonWebToken.JwtHeaderParser">
            <summary>
            Provides methods for converting JWT header JSON data into a <see cref="T:JsonWebToken.JwtHeader"/>
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtHeaderParser.ParseHeader(System.ReadOnlySpan{System.Byte},JsonWebToken.TokenValidationPolicy)">
            <summary>
            Parses the UTF-8 <paramref name="buffer"/> as JSON and returns a <see cref="T:JsonWebToken.JwtHeader"/>.
            </summary>
            <param name="buffer"></param>
            <param name="policy"></param>
        </member>
        <member name="T:JsonWebToken.JwtObject">
            <summary>
            Represents a JSON object.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.JwtObject"/> class.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtObject.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.JwtObject"/> class.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtObject.Count">
            <summary>
            Gets the number of <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtObject.Add(JsonWebToken.JwtProperty)">
            <summary>
            Adds a <see cref="T:JsonWebToken.JwtProperty"/> to the end of the <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:JsonWebToken.JwtObject.Add(System.ReadOnlySpan{System.Byte},System.String)">
            <summary>
            Adds a <see cref="T:System.String"/> property to the end of the <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtObject.Add(System.String,System.String)">
            <summary>
            Adds a <see cref="T:System.String"/> property to the end of the <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtObject.Add(System.ReadOnlySpan{System.Byte},System.Int64)">
            <summary>
            Adds a <see cref="T:System.Int64"/> property to the end of the <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtObject.Add(System.String,System.Int64)">
            <summary>
            Adds a <see cref="T:System.Int64"/> property to the end of the <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtObject.Add(System.ReadOnlySpan{System.Byte},System.Double)">
            <summary>
            Adds a <see cref="T:System.Double"/> property to the end of the <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtObject.Add(System.String,System.Boolean)">
            <summary>
            Adds a <see cref="T:System.Double"/> property to the end of the <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtObject.Add(System.String,System.Double)">
            <summary>
            Adds a <see cref="T:System.Double"/> property to the end of the <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtObject.Add(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Adds a <see cref="T:System.Boolean"/> property to the end of the <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtObject.Add(System.ReadOnlySpan{System.Byte},JsonWebToken.JwtObject)">
            <summary>
            Adds a <see cref="T:JsonWebToken.JwtObject"/> property to the end of the <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtObject.Add(System.String,JsonWebToken.JwtObject)">
            <summary>
            Adds a <see cref="T:JsonWebToken.JwtObject"/> property to the end of the <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtObject.Add(System.ReadOnlySpan{System.Byte},JsonWebToken.JwtArray)">
            <summary>
            Adds a <see cref="T:JsonWebToken.JwtArray"/> property to the end of the <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtObject.Add(System.String,JsonWebToken.JwtArray)">
            <summary>
            Adds a <see cref="T:JsonWebToken.JwtArray"/> property to the end of the <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtObject.Add(System.ReadOnlySpan{System.Byte})">
            <summary>
            Adds a <c>null</c> property to the end of the <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:JsonWebToken.JwtObject.Add(System.String)">
            <summary>
            Adds a <c>null</c> property to the end of the <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:JsonWebToken.JwtObject.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:JsonWebToken.JwtProperty"/> at the specified index;
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:JsonWebToken.JwtObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:JsonWebToken.JwtProperty"/> at the specified key;
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:JsonWebToken.JwtObject.Item(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Gets or sets the <see cref="T:JsonWebToken.JwtProperty"/> at the specified key;
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:JsonWebToken.JwtObject.Item(System.ReadOnlySpan{System.Byte})">
            <summary>
            Gets or sets the <see cref="T:JsonWebToken.JwtProperty"/> at the specified key;
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:JsonWebToken.JwtObject.Item(JsonWebToken.WellKnownProperty)">
            <summary>
            Gets or sets the <see cref="T:JsonWebToken.JwtProperty"/> at the specified key;
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtObject.TryGetValue(System.String,JsonWebToken.JwtProperty@)">
            <summary>
            Gets the <see cref="T:JsonWebToken.JwtProperty"/> associated with the specified key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtObject.TryGetValue(System.Byte[],JsonWebToken.JwtProperty@)">
            <summary>
            Gets the <see cref="T:JsonWebToken.JwtProperty"/> associated with the specified key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtObject.TryGetValue(System.ReadOnlySpan{System.Byte},JsonWebToken.JwtProperty@)">
            <summary>
            Gets the <see cref="T:JsonWebToken.JwtProperty"/> associated with the specified key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtObject.TryGetValue(JsonWebToken.WellKnownProperty,JsonWebToken.JwtProperty@)">
            <summary>
            Gets the <see cref="T:JsonWebToken.JwtProperty"/> associated with the specified key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtObject.ContainsKey(JsonWebToken.WellKnownProperty)">
            <summary>
            Determines whether a <see cref="T:JsonWebToken.JwtProperty"/> is in the <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtObject.ContainsKey(System.ReadOnlySpan{System.Byte})">
            <summary>
            Determines whether a <see cref="T:JsonWebToken.JwtProperty"/> is in the <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtObject.ContainsKey(System.String)">
            <summary>
            Determines whether a <see cref="T:JsonWebToken.JwtProperty"/> is in the <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtObject.Replace(JsonWebToken.JwtProperty)">
            <summary>
            Replaces a <see cref="T:JsonWebToken.JwtProperty"/> 
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:JsonWebToken.JwtObject.Serialize">
            <summary>
            Serializes the <see cref="T:JsonWebToken.JwtObject"/> into it JSON representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtObject.Serialize(System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            Serializes the <see cref="T:JsonWebToken.JwtObject"/> into it JSON representation.
            </summary>
            <param name="bufferWriter"></param>
        </member>
        <member name="M:JsonWebToken.JwtObject.Serialize(System.Text.Json.Utf8JsonWriter)">
            <summary>
            Serializes the <see cref="T:JsonWebToken.JwtObject"/> into it JSON representation.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:JsonWebToken.JwtObject.ToString">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.JwtObject.Merge(JsonWebToken.JwtObject)">
            <summary>
            Merge the <paramref name="other"/> into this <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:JsonWebToken.JwtObject.GetEnumerator">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.JsonParser">
            <summary>
            Provides methods for converting Base64Url JSON data into a <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
        </member>
        <member name="M:JsonWebToken.JsonParser.Parse(System.ReadOnlySpan{System.Byte})">
            <summary>
            Parses the UTF-8 <paramref name="buffer"/> as JSON and returns a <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:JsonWebToken.JsonParser.ReadJsonObject(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Use the <paramref name="reader"/> as JSON input and returns a <see cref="T:JsonWebToken.JwtObject"/>.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:JsonWebToken.JsonParser.ReadJsonArray(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Use the <paramref name="reader"/> as JSON input and returns a <see cref="T:JsonWebToken.JwtArray"/>.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:JsonWebToken.JsonParser.ReadStringArray(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Use the <paramref name="reader"/> as JSON input and returns a <see cref="T:JsonWebToken.JwtArray"/>.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:JsonWebToken.JsonParser.ConsumeJsonArray(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Consume a JSON array.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:JsonWebToken.JwtPayload">
            <summary>
            Represents the claims contained in the JWT.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtPayload.#ctor(JsonWebToken.JwtObject)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.JwtPayload"/> class.
            </summary>
            <param name="inner"></param>
        </member>
        <member name="M:JsonWebToken.JwtPayload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.JwtPayload"/> class.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtPayload.Item(System.String)">
            <summary>
             Gets the claim for a specified key in the current <see cref="T:JsonWebToken.JwtPayload"/>.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:JsonWebToken.JwtPayload.Item(System.ReadOnlySpan{System.Byte})">
            <summary>
             Gets the claim for a specified key in the current <see cref="T:JsonWebToken.JwtPayload"/>.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:JsonWebToken.JwtPayload.Aud">
            <summary>
            Gets the 'aud' claim as a list of strings.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtPayload.Exp">
            <summary>
            Gets the 'expiration time' claim.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtPayload.Jti">
            <summary>
            Gets the 'JWT ID' claim.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtPayload.Iat">
            <summary>
            Gets the 'issued at' claim.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtPayload.Iss">
            <summary>
            Gets the 'issuer' claim.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtPayload.Nbf">
            <summary>
            Gets the 'not before' claim.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtPayload.Sub">
            <summary>
            Gets the 'subject' claim.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtPayload.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:JsonWebToken.JwtPayload"/> contains the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtPayload.ContainsKey(System.ReadOnlySpan{System.Byte})">
            <summary>
            Determines whether the <see cref="T:JsonWebToken.JwtPayload"/> contains the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtPayload.TryGetValue(System.ReadOnlySpan{System.Byte},JsonWebToken.JwtProperty@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtPayload.TryGetValue(System.String,JsonWebToken.JwtProperty@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtPayload.ToString">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.JwtPayloadParser">
            <summary>
            Provides methods for converting JWT header JSON data into a <see cref="T:JsonWebToken.JwtHeader"/>
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtPayloadParser.ParsePayload(System.ReadOnlySpan{System.Byte},JsonWebToken.TokenValidationPolicy)">
            <summary>
            Parses the UTF-8 <paramref name="buffer"/> as JSON and returns a <see cref="T:JsonWebToken.JwtPayload"/>.
            </summary>
            <param name="buffer"></param>
            <param name="policy"></param>
        </member>
        <member name="T:JsonWebToken.JwtProperty">
            <summary>
            Represents a JSON property.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtProperty.IsEmpty">
            <summary>
            Gets whether the <see cref="T:JsonWebToken.JwtProperty"/> is empty.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtProperty.Utf8Name">
            <summary>
            Gets the name of the <see cref="T:JsonWebToken.JwtProperty"/> in its UTF-8 representation.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtProperty.Type">
            <summary>
            Gets the <see cref="T:JsonWebToken.JwtTokenType"/> of the <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtProperty.WellKnownName">
            <summary>
            Gets the <see cref="T:JsonWebToken.WellKnownProperty"/> value representing a well known property name.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtProperty.Value">
            <summary>
            Gets the value of the <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlySpan{System.Byte},JsonWebToken.JwtArray)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(JsonWebToken.WellKnownProperty,JsonWebToken.JwtArray)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="wellKnown"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlySpan{System.Byte},JsonWebToken.JwtObject)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlySpan{System.Byte},System.String)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlySpan{System.Byte},System.Byte[])">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlySpan{System.Byte},System.Int64)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlySpan{System.Byte},System.Double)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlySpan{System.Byte},System.Single)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/> with a <c>null</c> value.
            </summary>
            <param name="utf8Name"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlyMemory{System.Byte},JsonWebToken.JwtArray)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlyMemory{System.Byte},JsonWebToken.JwtObject)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlyMemory{System.Byte},System.String)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlyMemory{System.Byte},System.Byte[])">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlyMemory{System.Byte},System.Int64)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlyMemory{System.Byte},System.Double)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlyMemory{System.Byte},System.Single)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlyMemory{System.Byte},System.Boolean)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="utf8Name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/> with a <c>null</c> value.
            </summary>
            <param name="utf8Name"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.String,JsonWebToken.JwtArray)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.String,JsonWebToken.JwtObject)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.String,System.Single)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(System.String)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/> with a <c>null</c> value.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(JsonWebToken.WellKnownProperty,System.String)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="wellKnown"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(JsonWebToken.WellKnownProperty,System.Byte[])">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="wellKnown"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(JsonWebToken.WellKnownProperty,System.Int64)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="wellKnown"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(JsonWebToken.WellKnownProperty,System.Double)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="wellKnown"></param>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(JsonWebToken.EncryptionAlgorithm)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtProperty.#ctor(JsonWebToken.CompressionAlgorithm)">
            <summary>
            Initializes a new instance of the struct <see cref="T:JsonWebToken.JwtProperty"/>.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:JsonWebToken.JwtProperty.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:JsonWebToken.JwtProperty"/> at the specified key;
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.JwtProperty.ContainsKey(System.String)">
            <summary>
            Gets whether the <paramref name="key"/> is present in the current <see cref="T:JsonWebToken.JwtProperty"/> at the specified key. 
            Return always <c>false</c> if the <see cref="T:JsonWebToken.JwtProperty"/> is not a JSON object.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:JsonWebToken.JwtReader">
            <summary>
            Reads and validates a JWT.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtReader.#ctor(System.Collections.Generic.ICollection{JsonWebToken.IKeyProvider})">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.JwtReader"/>.
            </summary>
            <param name="encryptionKeyProviders"></param>
        </member>
        <member name="M:JsonWebToken.JwtReader.#ctor(JsonWebToken.Jwk[])">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.JwtReader"/>.
            </summary>
            <param name="encryptionKeys"></param>
        </member>
        <member name="M:JsonWebToken.JwtReader.#ctor(JsonWebToken.IKeyProvider)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.JwtReader"/>.
            </summary>
            <param name="encryptionKeyProvider"></param>
        </member>
        <member name="M:JsonWebToken.JwtReader.#ctor(JsonWebToken.Jwks)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.JwtReader"/>.
            </summary>
            <param name="encryptionKeys"></param>
        </member>
        <member name="M:JsonWebToken.JwtReader.#ctor(JsonWebToken.Jwk)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.JwtReader"/>.
            </summary>
            <param name="encryptionKey"></param>
        </member>
        <member name="M:JsonWebToken.JwtReader.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.JwtReader"/>.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtReader.EnableHeaderCaching">
            <summary>
            Defines whether the header will be cached. Default is <c>true</c>.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtReader.TryReadToken(System.String,JsonWebToken.TokenValidationPolicy)">
            <summary>
            Reads and validates a JWT encoded as a JWS or JWE in compact serialized format.
            </summary>
            <param name="token">The JWT encoded as JWE or JWS</param>
            <param name="policy">The validation policy.</param>
        </member>
        <member name="M:JsonWebToken.JwtReader.TryReadToken(System.Buffers.ReadOnlySequence{System.Byte}@,JsonWebToken.TokenValidationPolicy)">
            <summary>
            Reads and validates a JWT encoded as a JWS or JWE in compact serialized format.
            </summary>
            <param name="utf8Token">The JWT encoded as JWE or JWS.</param>
            <param name="policy">The validation policy.</param>
        </member>
        <member name="M:JsonWebToken.JwtReader.TryReadToken(System.ReadOnlySpan{System.Byte},JsonWebToken.TokenValidationPolicy)">
            <summary>
            Reads and validates a JWT encoded as a JWS or JWE in compact serialized format.
            </summary>
            <param name="utf8Token">The JWT encoded as JWE or JWS.</param>
            <param name="policy">The validation policy.</param>
        </member>
        <member name="T:JsonWebToken.JwtTokenType">
            <summary>
            Specifies the type of token.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtTokenType.Null">
            <summary>
             A null value. 
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtTokenType.Object">
            <summary>
            A JSON object.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtTokenType.Array">
            <summary>
            A JSON array.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtTokenType.Integer">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtTokenType.Float">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtTokenType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtTokenType.Utf8String">
            <summary>
            A byte array representing a UTF8 string.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtTokenType.Boolean">
            <summary>
             A boolean value.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtTokenType.SignatureAlgorithm">
            <summary>
            A signature algorithm.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtTokenType.KeyManagementAlgorithm">
            <summary>
            A key management algorithm.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtTokenType.EncryptionAlgorithm">
            <summary>
            A encryption algorithm.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtTokenType.CompressionAlgorithm">
            <summary>
            A compression algorithm.
            </summary>
        </member>
        <member name="T:JsonWebToken.JwtValue">
            <summary>
            Represents a JSON value.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtValue.Null">
            <summary>
            A <see cref="T:JsonWebToken.JwtValue"/> with <c>null</c> value.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtValue.True">
            <summary>
            A <see cref="T:JsonWebToken.JwtValue"/> with <c>true</c> value.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtValue.False">
            <summary>
            A <see cref="T:JsonWebToken.JwtValue"/> with <c>false</c> value.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtValue.Type">
            <summary>
            Gets the <see cref="T:JsonWebToken.JwtTokenType"/> of the <see cref="T:JsonWebToken.JwtValue"/>.
            </summary>
        </member>
        <member name="F:JsonWebToken.JwtValue.Value">
            <summary>
            Gets the value of the <see cref="T:JsonWebToken.JwtValue"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtValue.#ctor(JsonWebToken.JwtArray)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.JwtValue"/> class.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtValue.#ctor(JsonWebToken.JwtObject)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.JwtValue"/> class.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.JwtValue"/> class.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtValue.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.JwtValue"/> class.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.JwtValue"/> class.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtValue.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.JwtValue"/> class.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.JwtValue"/> class.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtValue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.JwtValue"/> class.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.JwtValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.JwtValue"/> class.
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:JsonWebToken.JwtWriter">
            <summary>
            Writes a JWT.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtWriter.TokenLifetimeInSeconds">
            <summary>
            Gets or sets the token lifetime in seconds.
            </summary>
            <remarks>Used by <see cref="M:JsonWebToken.JwtWriter.WriteToken(JsonWebToken.JwtDescriptor)"/> to set the default expiration ('exp').</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">'value' less than 0.</exception>
        </member>
        <member name="P:JsonWebToken.JwtWriter.IgnoreTokenValidation">
            <summary>
            Gets or sets whether the <see cref="T:JsonWebToken.JwtDescriptor"/> has to be validated. Default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtWriter.EnableHeaderCaching">
            <summary>
            Gets or sets whether the JWT header will be cached. Default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:JsonWebToken.JwtWriter.GenerateIssuedTime">
            <summary>
            Gets or sets whether the issued time must be generated. Default value is <c>false</c>.
            </summary>
        </member>
        <member name="M:JsonWebToken.JwtWriter.WriteToken(JsonWebToken.JwtDescriptor)">
            <summary>
            Writes a JWT in its compact serialization format.
            </summary>
            <param name="descriptor">The descriptor of the JWT.</param>
            <returns>The array of <see cref="T:System.Byte"/> representation of the JWT.</returns>
        </member>
        <member name="M:JsonWebToken.JwtWriter.WriteToken(JsonWebToken.JwtDescriptor,System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            Writes a JWT in its compact serialization format.
            </summary>
            <param name="descriptor">The descriptor of the JWT.</param>
            <param name="output">The <see cref="T:System.Buffers.IBufferWriter`1"/> used for writing the output.</param>
            <returns>The array of <see cref="T:System.Byte"/> representation of the JWT.</returns>
        </member>
        <member name="M:JsonWebToken.JwtWriter.WriteTokenString(JsonWebToken.JwtDescriptor)">
            <summary>
            Writes a JWT in its compact serialization format and returns it a string.
            </summary>
            <param name="descriptor">The descriptor of the JWT.</param>
            <returns>The <see cref="T:System.String"/> retpresention of the JWT.</returns>
        </member>
        <member name="T:JsonWebToken.KeyManagementAlgorithm">
            <summary>
            Defines key management algorithm.
            </summary>
        </member>
        <member name="F:JsonWebToken.KeyManagementAlgorithm.Empty">
            <summary>
            Empty
            </summary>
        </member>
        <member name="F:JsonWebToken.KeyManagementAlgorithm.Direct">
            <summary>
            'dir'
            </summary>
        </member>
        <member name="F:JsonWebToken.KeyManagementAlgorithm.Aes128KW">
            <summary>
            'A128KW'
            </summary>
        </member>
        <member name="F:JsonWebToken.KeyManagementAlgorithm.Aes192KW">
            <summary>
            'A192KW'
            </summary>
        </member>
        <member name="F:JsonWebToken.KeyManagementAlgorithm.Aes256KW">
            <summary>
            'A256KW'
            </summary>
        </member>
        <member name="F:JsonWebToken.KeyManagementAlgorithm.Aes128GcmKW">
            <summary>
            'A128GCMKW'
            </summary>
        </member>
        <member name="F:JsonWebToken.KeyManagementAlgorithm.Aes192GcmKW">
            <summary>
            'A192GCMKW'
            </summary>
        </member>
        <member name="F:JsonWebToken.KeyManagementAlgorithm.Aes256GcmKW">
            <summary>
            'A256GCMKW'
            </summary>
        </member>
        <member name="F:JsonWebToken.KeyManagementAlgorithm.RsaPkcs1">
            <summary>
            'RSA1_5'
            </summary>
        </member>
        <member name="F:JsonWebToken.KeyManagementAlgorithm.RsaOaep">
            <summary>
            'RSA-OAEP'
            </summary>
        </member>
        <member name="F:JsonWebToken.KeyManagementAlgorithm.RsaOaep256">
            <summary>
            'RSA-OAEP-128'
            </summary>
        </member>
        <member name="F:JsonWebToken.KeyManagementAlgorithm.RsaOaep384">
            <summary>
            'RSA-OAEP-192'
            </summary>
        </member>
        <member name="F:JsonWebToken.KeyManagementAlgorithm.RsaOaep512">
            <summary>
            'RSA-OAEP-256'
            </summary>
        </member>
        <member name="F:JsonWebToken.KeyManagementAlgorithm.EcdhEs">
            <summary>
            'ECDH-ES'
            </summary>
        </member>
        <member name="F:JsonWebToken.KeyManagementAlgorithm.EcdhEsAes128KW">
            <summary>
            'ECDH-ES+A128KW'
            </summary>
        </member>
        <member name="F:JsonWebToken.KeyManagementAlgorithm.EcdhEsAes192KW">
            <summary>
            'ECDH-ES+A192KW'
            </summary>
        </member>
        <member name="F:JsonWebToken.KeyManagementAlgorithm.EcdhEsAes256KW">
            <summary>
            'ECDH-ES+A256KW'
            </summary>
        </member>
        <member name="P:JsonWebToken.KeyManagementAlgorithm.Id">
            <summary>
            Gets the algorithm identifier. 
            </summary>
        </member>
        <member name="P:JsonWebToken.KeyManagementAlgorithm.RequiredKeySizeInBits">
            <summary>
            Gets the required key size, in bits.
            </summary>
        </member>
        <member name="P:JsonWebToken.KeyManagementAlgorithm.Category">
            <summary>
            Gets the algorithm category.
            </summary>
        </member>
        <member name="P:JsonWebToken.KeyManagementAlgorithm.WrappedAlgorithm">
            <summary>
            Gets the wrapped algorithm.
            </summary>
        </member>
        <member name="P:JsonWebToken.KeyManagementAlgorithm.Name">
            <summary>
            Gets the name of the key management algorithm.
            </summary>
        </member>
        <member name="P:JsonWebToken.KeyManagementAlgorithm.Utf8Name">
            <summary>
            Gets the name of the key management algorithm.
            </summary>
        </member>
        <member name="P:JsonWebToken.KeyManagementAlgorithm.ProduceEncryptionKey">
            <summary>
            Gets whether the algorithm produce an encryption key.
            </summary>
        </member>
        <member name="M:JsonWebToken.KeyManagementAlgorithm.#ctor(System.Int32,System.String,JsonWebToken.AlgorithmCategory)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.KeyManagementAlgorithm"/>. 
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="keyType"></param>
        </member>
        <member name="M:JsonWebToken.KeyManagementAlgorithm.#ctor(System.Int32,System.String,JsonWebToken.AlgorithmCategory,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.KeyManagementAlgorithm"/>. 
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="keyType"></param>
            <param name="wrappedAlgorithm"></param>
        </member>
        <member name="M:JsonWebToken.KeyManagementAlgorithm.#ctor(System.Int32,System.String,JsonWebToken.AlgorithmCategory,System.UInt16)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.KeyManagementAlgorithm"/>. 
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="keyType"></param>
            <param name="requiredKeySizeInBits"></param>
        </member>
        <member name="M:JsonWebToken.KeyManagementAlgorithm.#ctor(System.Int32,System.String,JsonWebToken.AlgorithmCategory,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.KeyManagementAlgorithm"/>. 
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="keyType"></param>
            <param name="produceEncryptedKey"></param>
        </member>
        <member name="M:JsonWebToken.KeyManagementAlgorithm.#ctor(System.Int32,System.String,JsonWebToken.AlgorithmCategory,System.UInt16,JsonWebToken.KeyManagementAlgorithm,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.KeyManagementAlgorithm"/>. 
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="keyType"></param>
            <param name="requiredKeySizeInBits"></param>
            <param name="wrappedAlgorithm"></param>
            <param name="produceEncryptedKey"></param>
        </member>
        <member name="M:JsonWebToken.KeyManagementAlgorithm.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a
            <see cref="T:JsonWebToken.KeyManagementAlgorithm"/> object, have the same value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.KeyManagementAlgorithm.Equals(JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Determines whether two specified <see cref="T:JsonWebToken.KeyManagementAlgorithm"/> objects have the same value.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.KeyManagementAlgorithm.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:JsonWebToken.KeyManagementAlgorithm"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.KeyManagementAlgorithm.op_Equality(JsonWebToken.KeyManagementAlgorithm,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Determines whether two specified <see cref="T:JsonWebToken.KeyManagementAlgorithm"/> have the same value.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.KeyManagementAlgorithm.op_Inequality(JsonWebToken.KeyManagementAlgorithm,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Determines whether two specified <see cref="T:JsonWebToken.KeyManagementAlgorithm"/> have different values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.KeyManagementAlgorithm.op_Explicit(JsonWebToken.KeyManagementAlgorithm)~System.String">
            <summary>
            Cast the <see cref="T:JsonWebToken.KeyManagementAlgorithm"/> into its <see cref="T:System.String"/> representation.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.KeyManagementAlgorithm.op_Explicit(System.Byte[])~JsonWebToken.KeyManagementAlgorithm">
            <summary>
            Cast the <see cref="T:System.String"/> into its <see cref="T:JsonWebToken.SignatureAlgorithm"/> representation.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.KeyManagementAlgorithm.op_Explicit(System.String)~JsonWebToken.KeyManagementAlgorithm">
            <summary>
            Cast the <see cref="T:System.String"/> into its <see cref="T:JsonWebToken.KeyManagementAlgorithm"/> representation.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.KeyManagementAlgorithm.op_Explicit(JsonWebToken.KeyManagementAlgorithm)~System.Byte[]">
            <summary>
            Cast the <see cref="T:JsonWebToken.KeyManagementAlgorithm"/> into its <see cref="T:System.Byte"/> array representation.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.KeyManagementAlgorithm.ToString">
            <inheritsddoc />
        </member>
        <member name="M:JsonWebToken.KeyManagementAlgorithm.TryParseSlow(System.Text.Json.Utf8JsonReader@,JsonWebToken.KeyManagementAlgorithm@)">
            <summary>
            Parse the current value of the <see cref="T:System.Text.Json.Utf8JsonReader"/> into its <see cref="T:JsonWebToken.KeyManagementAlgorithm"/> representation.
            </summary>
            <param name="reader"></param>
            <param name="algorithm"></param>
        </member>
        <member name="M:JsonWebToken.KeyManagementAlgorithm.TryParse(System.ReadOnlySpan{System.Byte},JsonWebToken.KeyManagementAlgorithm@)">
            <summary>
            Cast the <see cref="T:System.ReadOnlySpan`1"/> into its <see cref="T:JsonWebToken.KeyManagementAlgorithm"/> representation.
            </summary>
            <param name="value"></param>
            <param name="algorithm"></param>
        </member>
        <member name="M:JsonWebToken.KeyManagementAlgorithm.TryParse(System.Text.Json.Utf8JsonReader@,JsonWebToken.KeyManagementAlgorithm@)">
            <summary>
            Parse the current value of the <see cref="T:System.Text.Json.Utf8JsonReader"/> into its <see cref="T:JsonWebToken.KeyManagementAlgorithm"/> representation.
            </summary>
            <param name="reader"></param>
            <param name="algorithm"></param>
        </member>
        <member name="T:JsonWebToken.KeyProviderExtensions">
            <summary>
            Provides extensions methods to <see cref="T:JsonWebToken.IKeyProvider"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.KeyProviderExtensions.GetKeys(JsonWebToken.IKeyProvider)">
            <summary>
            Gets a list of <see cref="T:JsonWebToken.Jwk"/>.
            </summary>
        </member>
        <member name="T:JsonWebToken.KeyUnwrapper">
            <summary>
            Provides key unwrapping services.
            </summary>
        </member>
        <member name="P:JsonWebToken.KeyUnwrapper.Key">
            <summary>
            Gets the <see cref="T:JsonWebToken.Jwk"/> that is being used.
            </summary>
        </member>
        <member name="P:JsonWebToken.KeyUnwrapper.Algorithm">
            <summary>
            Gets the <see cref="T:JsonWebToken.KeyManagementAlgorithm"/> that is being used.
            </summary>
        </member>
        <member name="P:JsonWebToken.KeyUnwrapper.EncryptionAlgorithm">
            <summary>
            Gets the <see cref="P:JsonWebToken.KeyUnwrapper.EncryptionAlgorithm"/> that is being used.
            </summary>
        </member>
        <member name="M:JsonWebToken.KeyUnwrapper.#ctor(JsonWebToken.Jwk,JsonWebToken.EncryptionAlgorithm,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.KeyUnwrapper"/> class.
            </summary>
            <param name="key"></param>
            <param name="encryptionAlgorithm"></param>
            <param name="algorithm"></param>
        </member>
        <member name="M:JsonWebToken.KeyUnwrapper.Dispose">
            <summary>
            Calls <see cref="M:JsonWebToken.KeyUnwrapper.Dispose(System.Boolean)"/> and <see cref="M:System.GC.SuppressFinalize(System.Object)"/>
            </summary>
        </member>
        <member name="M:JsonWebToken.KeyUnwrapper.Dispose(System.Boolean)">
            <summary>
            Can be over written in descendants to dispose of internal components.
            </summary>
            <param name="disposing">true, if called from Dispose(), false, if invoked inside a finalizer</param>     
        </member>
        <member name="M:JsonWebToken.KeyUnwrapper.TryUnwrapKey(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},JsonWebToken.JwtHeader,System.Int32@)">
            <summary>
            Unwrap a key.
            </summary>
            <param name="keyBytes">key to unwrap.</param>
            <param name="destination"></param>
            <param name="header"></param>
            <param name="bytesWritten"></param>
            <returns>Unwrapped key.</returns>
        </member>
        <member name="M:JsonWebToken.KeyUnwrapper.GetKeyUnwrapSize(System.Int32)">
            <summary>
            Gets the size of the unwrapped key.
            </summary>
        </member>
        <member name="T:JsonWebToken.KeyWrapper">
            <summary>
            Provides key wrapping services.
            </summary>
        </member>
        <member name="P:JsonWebToken.KeyWrapper.Key">
            <summary>
            Gets the <see cref="T:JsonWebToken.Jwk"/> that is being used.
            </summary>
        </member>
        <member name="P:JsonWebToken.KeyWrapper.Algorithm">
            <summary>
            Gets the <see cref="T:JsonWebToken.KeyManagementAlgorithm"/> that is being used.
            </summary>
        </member>
        <member name="P:JsonWebToken.KeyWrapper.EncryptionAlgorithm">
            <summary>
            Gets the <see cref="P:JsonWebToken.KeyWrapper.EncryptionAlgorithm"/> that is being used.
            </summary>
        </member>
        <member name="M:JsonWebToken.KeyWrapper.#ctor(JsonWebToken.Jwk,JsonWebToken.EncryptionAlgorithm,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.KeyWrapper"/> class.
            </summary>
            <param name="key"></param>
            <param name="encryptionAlgorithm"></param>
            <param name="algorithm"></param>
        </member>
        <member name="M:JsonWebToken.KeyWrapper.Dispose">
            <summary>
            Calls <see cref="M:JsonWebToken.KeyWrapper.Dispose(System.Boolean)"/> and <see cref="M:System.GC.SuppressFinalize(System.Object)"/>
            </summary>
        </member>
        <member name="M:JsonWebToken.KeyWrapper.Dispose(System.Boolean)">
            <summary>
            Can be over written in descendants to dispose of internal components.
            </summary>
            <param name="disposing">true, if called from Dispose(), false, if invoked inside a finalizer</param>     
        </member>
        <member name="M:JsonWebToken.KeyWrapper.WrapKey(JsonWebToken.Jwk,JsonWebToken.JwtObject,System.Span{System.Byte})">
            <summary>
            Wrap a key.
            </summary>
            <param name="staticKey">The key to be wrapped. If <c>null</c>, the key will be ephemeral and generated within this method.</param>
            <param name="header">The key-values representing the JWT header.</param>
            <param name="destination">The destination span.</param>
        </member>
        <member name="M:JsonWebToken.KeyWrapper.GetKeyWrapSize">
            <summary>
            Gets the size of the wrapped key.
            </summary>
        </member>
        <member name="M:JsonWebToken.KeyWrapper.CreateSymmetricKey(JsonWebToken.EncryptionAlgorithm,JsonWebToken.SymmetricJwk)">
            <summary>
            Creates a symmetric key based on the <paramref name="encryptionAlgorithm"/>, excepts if the <paramref name="staticKey"/> is defined.
            </summary>
            <param name="encryptionAlgorithm"></param>
            <param name="staticKey"></param>
            <returns></returns>
        </member>
        <member name="T:JsonWebToken.PlaintextJweDescriptor">
            <summary>
            Defines an encrypted JWT with a <see cref="T:System.String"/> payload.
            </summary>
        </member>
        <member name="M:JsonWebToken.PlaintextJweDescriptor.#ctor(JsonWebToken.JwtObject,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.PlaintextJweDescriptor"/>.
            </summary>
            <param name="header"></param>
            <param name="payload"></param>
        </member>
        <member name="M:JsonWebToken.PlaintextJweDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.PlaintextJweDescriptor"/>.
            </summary>
            <param name="payload"></param>
        </member>
        <member name="M:JsonWebToken.PlaintextJweDescriptor.Encode(JsonWebToken.EncodingContext)">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.PooledByteBufferWriter">
            <summary>
            Represents an implementation of <see cref="T:System.Buffers.IBufferWriter`1" /> where the memory owner is a <see cref="T:System.Buffers.ArrayPool`1" /> of bytes.
            </summary>
        </member>
        <member name="M:JsonWebToken.PooledByteBufferWriter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.PooledByteBufferWriter"/> class.
            </summary>
            <param name="initialCapacity "></param>
        </member>
        <member name="P:JsonWebToken.PooledByteBufferWriter.Buffer">
            <summary>
            Gets the output as a <see cref="T:System.Byte" /> array.
            </summary>
        </member>
        <member name="P:JsonWebToken.PooledByteBufferWriter.WrittenMemory">
            <summary>
            Gets the output as a <see cref="T:System.Memory`1"/>.
            </summary>
        </member>
        <member name="P:JsonWebToken.PooledByteBufferWriter.WrittenSpan">
            <summary>
            Gets the output as a <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
        </member>
        <member name="P:JsonWebToken.PooledByteBufferWriter.WrittenCount">
            <summary>
            Gets the bytes written.
            </summary>
        </member>
        <member name="P:JsonWebToken.PooledByteBufferWriter.Capacity">
            <summary>
            Gets the capacity.
            </summary>
        </member>
        <member name="M:JsonWebToken.PooledByteBufferWriter.Clear">
            <summary>
            Clear the <see cref="T:JsonWebToken.PooledByteBufferWriter"/>. 
            </summary>
        </member>
        <member name="M:JsonWebToken.PooledByteBufferWriter.Advance(System.Int32)">
            <summary>
            Advances the <see cref="T:JsonWebToken.PooledByteBufferWriter"/> of the <paramref name="count"/> indicated.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:JsonWebToken.PooledByteBufferWriter.Dispose">
            <summary>
            Returns the rented buffer back to the pool.
            </summary>
        </member>
        <member name="M:JsonWebToken.PooledByteBufferWriter.GetSpan(System.Int32)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.PooledByteBufferWriter.GetMemory(System.Int32)">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.RsaJwk">
            <summary>
            Represents a RSA JSON Web Key as defined in https://tools.ietf.org/html/rfc7518#section-6.
            </summary>
        </member>
        <member name="M:JsonWebToken.RsaJwk.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.RsaJwk.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.RsaJwk.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.RsaJwk.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.RsaJwk.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.RsaJwk.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.RsaJwk.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.RsaJwk.#ctor(System.Security.Cryptography.RSAParameters,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.RsaJwk.#ctor(System.Byte[],System.Byte[],JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.RsaJwk.#ctor(System.String,System.String,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.RsaJwk.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.RsaJwk.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.RsaJwk.#ctor(System.Security.Cryptography.RSAParameters,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.RsaJwk.#ctor(System.Byte[],System.Byte[],JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.RsaJwk.#ctor(System.String,System.String,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.RsaJwk.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
        </member>
        <member name="P:JsonWebToken.RsaJwk.Kty">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.RsaJwk.ExportParameters">
            <summary>
            Exports the RSA parameters from the <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.RsaJwk.SupportSignature(JsonWebToken.SignatureAlgorithm)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.RsaJwk.SupportKeyManagement(JsonWebToken.KeyManagementAlgorithm)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.RsaJwk.SupportEncryption(JsonWebToken.EncryptionAlgorithm)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.RsaJwk.CreateSigner(JsonWebToken.SignatureAlgorithm)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.RsaJwk.CreateKeyWrapper(JsonWebToken.EncryptionAlgorithm,JsonWebToken.KeyManagementAlgorithm)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.RsaJwk.CreateKeyUnwrapper(JsonWebToken.EncryptionAlgorithm,JsonWebToken.KeyManagementAlgorithm)">
            <inheritsdoc />
        </member>
        <member name="P:JsonWebToken.RsaJwk.KeySizeInBits">
            <inheritsdoc />
        </member>
        <member name="P:JsonWebToken.RsaJwk.DP">
            <summary>
            Gets or sets the 'dp' (First Factor CRT Exponent).
            </summary>
        </member>
        <member name="P:JsonWebToken.RsaJwk.DQ">
            <summary>
            Gets or sets the 'dq' (Second Factor CRT Exponent).
            </summary>
        </member>
        <member name="P:JsonWebToken.RsaJwk.E">
            <summary>
            Gets or sets the 'e' ( Exponent).
            </summary>
        </member>
        <member name="P:JsonWebToken.RsaJwk.N">
            <summary>
            Gets or sets the 'n' (Modulus).
            </summary>
        </member>
        <member name="P:JsonWebToken.RsaJwk.P">
            <summary>
            Gets or sets the 'p' (First Prime Factor).
            </summary>
        </member>
        <member name="P:JsonWebToken.RsaJwk.Q">
            <summary>
            Gets or sets the 'q' (Second  Prime Factor).
            </summary>
        </member>
        <member name="P:JsonWebToken.RsaJwk.QI">
            <summary>
            Gets or sets the 'qi' (First CRT Coefficient).
            </summary>
        </member>
        <member name="M:JsonWebToken.RsaJwk.GeneratePrivateKey(System.Int32,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Generates a new random private <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
            <param name="sizeInBits"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.RsaJwk.GeneratePrivateKey(System.Int32,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Generates a new random private <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
            <param name="sizeInBits"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.RsaJwk.GeneratePrivateKey(System.Int32)">
            <summary>
            Generates a new random private <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
            <param name="sizeInBits"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.RsaJwk.GeneratePublicKey(System.Int32,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Generates a new random public <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
            <param name="sizeInBits"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.RsaJwk.GeneratePublicKey(System.Int32,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Generates a new random public <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
            <param name="sizeInBits"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.RsaJwk.GeneratePublicKey(System.Int32)">
            <summary>
            Generates a new random private <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
            <param name="sizeInBits"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.RsaJwk.GenerateKey(System.Int32,System.Boolean)">
            <summary>
            Generates a new RSA key.
            </summary>
            <param name="sizeInBits">The key size in bits.</param>
            <param name="withPrivateKey"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.RsaJwk.GenerateKey(System.Int32,System.Boolean,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Generates a new random <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
            <param name="sizeInBits"></param>
            <param name="withPrivateKey"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.RsaJwk.GenerateKey(System.Int32,System.Boolean,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Generates a new random <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
            <param name="sizeInBits"></param>
            <param name="withPrivateKey"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.RsaJwk.FromParameters(System.Security.Cryptography.RSAParameters,JsonWebToken.KeyManagementAlgorithm,System.Boolean)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
            <param name="parameters">A <see cref="T:System.Security.Cryptography.RSAParameters"/> that contains the key parameters.</param>
            <param name="algorithm">The <see cref="T:JsonWebToken.KeyManagementAlgorithm"/></param>
            <param name="computeThumbprint">Defines whether the thumbprint of the key should be computed </param>
        </member>
        <member name="M:JsonWebToken.RsaJwk.FromParameters(System.Security.Cryptography.RSAParameters,JsonWebToken.SignatureAlgorithm,System.Boolean)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
            <param name="parameters">A <see cref="T:System.Security.Cryptography.RSAParameters"/> that contains the key parameters.</param>
            <param name="algorithm">The <see cref="T:JsonWebToken.SignatureAlgorithm"/></param>
            <param name="computeThumbprint">Defines whether the thumbprint of the key should be computed </param>
        </member>
        <member name="M:JsonWebToken.RsaJwk.FromParameters(System.Security.Cryptography.RSAParameters,System.Boolean)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
            <param name="parameters">A <see cref="T:System.Security.Cryptography.RSAParameters"/> that contains the key parameters.</param>
            <param name="computeThumbprint">Defines whether the thumbprint of the key should be computed </param>
        </member>
        <member name="M:JsonWebToken.RsaJwk.FromParameters(System.Security.Cryptography.RSAParameters)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
            <param name="parameters">A <see cref="T:System.Security.Cryptography.RSAParameters"/> that contains the key parameters.</param>
        </member>
        <member name="M:JsonWebToken.RsaJwk.FromPem(System.String)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.RsaJwk"/>.
            </summary>
            <param name="pem">A PEM-encoded key in PKCS1 (BEGIN RSA PUBLIC/PRIVATE KEY) or PKCS8 (BEGIN PUBLIC/PRIVATE KEY) format.</param>
            Support unencrypted PKCS#1 public RSA key, unencrypted PKCS#1 private RSA key,
            unencrypted PKCS#8 public RSA key, unencrypted PKCS#8 private RSA key. 
            Password-protected key is not supported.
        </member>
        <member name="M:JsonWebToken.RsaJwk.Canonicalize(System.Buffers.IBufferWriter{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.RsaJwk.AsSpan">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.RsaJwk.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.RsaJwk.Equals(JsonWebToken.Jwk)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.RsaJwk.GetHashCode">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.RsaJwk.Dispose">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.SignatureAlgorithm">
            <summary>
            Defines signature algorithm.
            </summary>
        </member>
        <member name="F:JsonWebToken.SignatureAlgorithm.None">
            <summary>
            'none'
            </summary>
        </member>
        <member name="F:JsonWebToken.SignatureAlgorithm.HmacSha256">
            <summary>
            'HS256'
            </summary>
        </member>
        <member name="F:JsonWebToken.SignatureAlgorithm.HmacSha384">
            <summary>
            'HS384'
            </summary>
        </member>
        <member name="F:JsonWebToken.SignatureAlgorithm.HmacSha512">
            <summary>
            'HS512'
            </summary>
        </member>
        <member name="F:JsonWebToken.SignatureAlgorithm.RsaSha256">
            <summary>
            'RS256'
            </summary>
        </member>
        <member name="F:JsonWebToken.SignatureAlgorithm.RsaSha384">
            <summary>
            'RS384'
            </summary>
        </member>
        <member name="F:JsonWebToken.SignatureAlgorithm.RsaSha512">
            <summary>
            'RS512'
            </summary>
        </member>
        <member name="F:JsonWebToken.SignatureAlgorithm.EcdsaSha256K">
            <summary>
            'ES256K'
            </summary>
        </member>
        <member name="F:JsonWebToken.SignatureAlgorithm.EcdsaSha256">
            <summary>
            'ES256'
            </summary>
        </member>
        <member name="F:JsonWebToken.SignatureAlgorithm.EcdsaSha384">
            <summary>
            'ES384'
            </summary>
        </member>
        <member name="F:JsonWebToken.SignatureAlgorithm.EcdsaSha512">
            <summary>
            'ES512'
            </summary>
        </member>
        <member name="F:JsonWebToken.SignatureAlgorithm.RsaSsaPssSha256">
            <summary>
            'PS256'
            </summary>
        </member>
        <member name="F:JsonWebToken.SignatureAlgorithm.RsaSsaPssSha384">
            <summary>
            'PS384'
            </summary>
        </member>
        <member name="F:JsonWebToken.SignatureAlgorithm.RsaSsaPssSha512">
            <summary>
            'PS512'
            </summary>
        </member>
        <member name="P:JsonWebToken.SignatureAlgorithm.Id">
            <summary>
            Gets the algorithm identifier. 
            </summary>
        </member>
        <member name="P:JsonWebToken.SignatureAlgorithm.Name">
            <summary>
            Gets the name of the signature algorithm.
            </summary>
        </member>
        <member name="P:JsonWebToken.SignatureAlgorithm.Utf8Name">
            <summary>
            Gets the name of the signature algorithm.
            </summary>
        </member>
        <member name="P:JsonWebToken.SignatureAlgorithm.Category">
            <summary>
            Gets the algorithm category.
            </summary>
        </member>
        <member name="P:JsonWebToken.SignatureAlgorithm.RequiredKeySizeInBits">
            <summary>
            Gets the required key size, in bits.
            </summary>
        </member>
        <member name="P:JsonWebToken.SignatureAlgorithm.HashAlgorithm">
            <summary>
            Gets the hash algorithm. 
            </summary>
        </member>
        <member name="P:JsonWebToken.SignatureAlgorithm.Sha">
            <summary>
            Gets the <see cref="T:JsonWebToken.Sha2"/> algorithm. 
            </summary>
        </member>
        <member name="M:JsonWebToken.SignatureAlgorithm.#ctor(System.Int32,System.String,JsonWebToken.AlgorithmCategory,System.UInt16,System.Security.Cryptography.HashAlgorithmName)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.SignatureAlgorithm"/>. 
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="category"></param>
            <param name="requiredKeySizeInBits"></param>
            <param name="hashAlgorithm"></param>
        </member>
        <member name="M:JsonWebToken.SignatureAlgorithm.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a
            <see cref="T:JsonWebToken.SignatureAlgorithm"/> object, have the same value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.SignatureAlgorithm.Equals(JsonWebToken.SignatureAlgorithm)">
            <summary>
            Determines whether two specified <see cref="T:JsonWebToken.SignatureAlgorithm"/> objects have the same value.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.SignatureAlgorithm.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:JsonWebToken.SignatureAlgorithm"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.SignatureAlgorithm.op_Equality(JsonWebToken.SignatureAlgorithm,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Determines whether two specified <see cref="T:JsonWebToken.SignatureAlgorithm"/> have the same value.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.SignatureAlgorithm.op_Inequality(JsonWebToken.SignatureAlgorithm,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Determines whether two specified <see cref="T:JsonWebToken.SignatureAlgorithm"/> have different values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.SignatureAlgorithm.op_Explicit(JsonWebToken.SignatureAlgorithm)~System.String">
            <summary>
            Cast the <see cref="T:JsonWebToken.SignatureAlgorithm"/> into its <see cref="T:System.String"/> representation.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.SignatureAlgorithm.op_Explicit(System.String)~JsonWebToken.SignatureAlgorithm">
            <summary>
            Cast the <see cref="T:System.String"/> into its <see cref="T:JsonWebToken.SignatureAlgorithm"/> representation.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.SignatureAlgorithm.op_Explicit(System.Byte[])~JsonWebToken.SignatureAlgorithm">
            <summary>
            Cast the <see cref="T:System.String"/> into its <see cref="T:JsonWebToken.SignatureAlgorithm"/> representation.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.SignatureAlgorithm.TryParseSlow(System.Text.Json.Utf8JsonReader@,JsonWebToken.SignatureAlgorithm@)">
            <summary>
            Reads the current value of the <paramref name="reader"/> and converts into its <see cref="T:JsonWebToken.SignatureAlgorithm"/> representation.
            </summary>
            <param name="reader"></param>
            <param name="algorithm"></param>
        </member>
        <member name="M:JsonWebToken.SignatureAlgorithm.TryParse(System.ReadOnlySpan{System.Byte},JsonWebToken.SignatureAlgorithm@)">
            <summary>
            Parses the <see cref="T:System.ReadOnlySpan`1"/> into its <see cref="T:JsonWebToken.SignatureAlgorithm"/> representation.
            </summary>
            <param name="value"></param>
            <param name="algorithm"></param>
        </member>
        <member name="M:JsonWebToken.SignatureAlgorithm.TryParse(System.Text.Json.Utf8JsonReader@,JsonWebToken.SignatureAlgorithm@)">
            <summary>
            Parse the current value of the <see cref="T:System.Text.Json.Utf8JsonReader"/> into its <see cref="T:JsonWebToken.SignatureAlgorithm"/> representation.
            </summary>
            <param name="reader"></param>
            <param name="algorithm"></param>
        </member>
        <member name="M:JsonWebToken.SignatureAlgorithm.op_Explicit(JsonWebToken.SignatureAlgorithm)~System.Int64">
            <summary>
            Cast the <see cref="T:JsonWebToken.SignatureAlgorithm"/> into its <see cref="T:System.Int64"/> representation.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:JsonWebToken.SignatureAlgorithm.ToString">
            <inheritsddoc />
        </member>
        <member name="T:JsonWebToken.SignatureValidationPolicy">
            <summary>
            Validates a token signature.
            </summary>
        </member>
        <member name="F:JsonWebToken.SignatureValidationPolicy.NoSignature">
            <summary>
            Allows to support the unsecure 'none' algorithm that require no signature.
            </summary>
        </member>
        <member name="F:JsonWebToken.SignatureValidationPolicy.IgnoreSignature">
            <summary>
            Allows to ignore the signature, whatever ther is an algorithm defined or not.
            </summary>
        </member>
        <member name="P:JsonWebToken.SignatureValidationPolicy.IsEnabled">
            <summary>
            Gets whether the signature validation is enabled.
            </summary>
        </member>
        <member name="M:JsonWebToken.SignatureValidationPolicy.TryValidateSignature(JsonWebToken.JwtHeader,System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Try to validate the token signature.
            </summary>
            <param name="header"></param>
            <param name="contentBytes"></param>
            <param name="signatureSegment"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.SignatureValidationPolicy.Create(JsonWebToken.IKeyProvider,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Creates a new <see cref="T:JsonWebToken.SignatureValidationPolicy"/> instance.
            </summary>
            <param name="keyProvider"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.SignatureValidationPolicy.DefaultSignatureValidationPolicy.#ctor(JsonWebToken.IKeyProvider,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.SignatureValidationPolicy"/> class.
            </summary>
            <param name="keyProvider"></param>
            <param name="algorithm"></param>
        </member>
        <member name="P:JsonWebToken.SignatureValidationPolicy.DefaultSignatureValidationPolicy.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:JsonWebToken.SignatureValidationPolicy.NoSignatureValidationContext.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:JsonWebToken.SignatureValidationPolicy.IgnoreSignatureValidationContext.IsEnabled">
            <inheritdoc />
        </member>
        <member name="T:JsonWebToken.SignatureValidationResult">
            <summary>
            Represents the result of a signature validation.
            </summary>
        </member>
        <member name="M:JsonWebToken.SignatureValidationResult.#ctor(JsonWebToken.TokenValidationStatus,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.SignatureValidationResult"/> class.
            </summary>
        </member>
        <member name="M:JsonWebToken.SignatureValidationResult.#ctor(JsonWebToken.TokenValidationStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.SignatureValidationResult"/> class.
            </summary>
        </member>
        <member name="M:JsonWebToken.SignatureValidationResult.#ctor(JsonWebToken.TokenValidationStatus,JsonWebToken.Jwk)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.SignatureValidationResult"/> class.
            </summary>
        </member>
        <member name="P:JsonWebToken.SignatureValidationResult.Succedeed">
            <summary>
            Gets whether the token validation is successful.
            </summary>
        </member>
        <member name="P:JsonWebToken.SignatureValidationResult.Status">
            <summary>
            Gets the status of the validation.
            </summary>
        </member>
        <member name="P:JsonWebToken.SignatureValidationResult.Exception">
            <summary>
            Gets the <see cref="P:JsonWebToken.SignatureValidationResult.Exception"/> that caused the error.
            </summary>
        </member>
        <member name="P:JsonWebToken.SignatureValidationResult.SigningKey">
            <summary>
            Gets the <see cref="T:JsonWebToken.Jwk"/> used for the signature.
            </summary>
        </member>
        <member name="M:JsonWebToken.SignatureValidationResult.Success">
            <summary>
            The signature is valid.
            </summary>
        </member>
        <member name="M:JsonWebToken.SignatureValidationResult.Success(JsonWebToken.Jwk)">
            <summary>
            The signature is valid.
            </summary>
        </member>
        <member name="M:JsonWebToken.SignatureValidationResult.InvalidSignature">
            <summary>
            The signature is invalid.
            </summary>
        </member>
        <member name="M:JsonWebToken.SignatureValidationResult.MissingSignature">
            <summary>
            The signature is not present.
            </summary>
        </member>
        <member name="M:JsonWebToken.SignatureValidationResult.SignatureKeyNotFound">
            <summary>
            The signature key is not found.
            </summary>
        </member>
        <member name="M:JsonWebToken.SignatureValidationResult.MalformedSignature(System.Exception)">
            <summary>
            The signature is not base64url encoded.
            </summary>
        </member>
        <member name="M:JsonWebToken.SignatureValidationResult.MalformedSignature">
            <summary>
            The signature is not base64url encoded.
            </summary>
        </member>
        <member name="T:JsonWebToken.Signer">
            <summary>
            Provides signature services, signing and verifying.
            </summary>
        </member>
        <member name="F:JsonWebToken.Signer.None">
            <summary>
            Defines a <see cref="T:JsonWebToken.Signer"/> that do nothing.
            </summary>
        </member>
        <member name="M:JsonWebToken.Signer.#ctor(JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:JsonWebToken.Signer"/> class used to create and verify signatures.
            </summary>
            <param name="algorithm">The signature algorithm to apply.</param>
        </member>
        <member name="P:JsonWebToken.Signer.Algorithm">
            <summary>
            Gets the signature algorithm.
            </summary>
        </member>
        <member name="P:JsonWebToken.Signer.HashSizeInBytes">
            <summary>
            Gets the hash size in bytes of the key.
            </summary>
        </member>
        <member name="P:JsonWebToken.Signer.Base64HashSizeInBytes">
            <summary>
            Gets the base64-URL hash size in bits of the key.
            </summary>
        </member>
        <member name="M:JsonWebToken.Signer.TrySign(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
            <summary>
            This must be overridden to produce a signature over the 'input'.
            </summary>
            <param name="input">bytes to sign.</param>
            <param name="destination"></param>
            <param name="bytesWritten"></param>
            <returns>signed bytes</returns>
        </member>
        <member name="M:JsonWebToken.Signer.Verify(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Verify a signature created over the 'input'.
            </summary>
            <param name="input">bytes to verify.</param>
            <param name="signature">signature to compare against.</param>
            <returns>true if the computed signature matches the signature parameter, false otherwise.</returns>
        </member>
        <member name="M:JsonWebToken.Signer.VerifyHalf(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Verify the firs thalf signature created over the 'input'.
            </summary>
            <param name="input">bytes to verify.</param>
            <param name="signature">signature to compare against.</param>
            <returns>true if the computed signature matches the signature parameter, false otherwise.</returns>
        </member>
        <member name="M:JsonWebToken.Signer.Dispose">
            <summary>
            Calls <see cref="M:JsonWebToken.Signer.Dispose(System.Boolean)"/> and <see cref="M:System.GC.SuppressFinalize(System.Object)"/>
            </summary>
        </member>
        <member name="M:JsonWebToken.Signer.Dispose(System.Boolean)">
            <summary>
            Can be over written in descendants to dispose of internal components.
            </summary>
            <param name="disposing">true, if called from Dispose(), false, if invoked inside a finalizer</param>     
        </member>
        <member name="T:JsonWebToken.StaticKeyProvider">
            <summary>
            Represents a static provider of keys.
            </summary>
        </member>
        <member name="M:JsonWebToken.StaticKeyProvider.#ctor(JsonWebToken.Jwks)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.StaticKeyProvider"/>.
            </summary>
            <param name="jwks"></param>
        </member>
        <member name="M:JsonWebToken.StaticKeyProvider.GetKeys(JsonWebToken.JwtHeader)">
            <summary>
            Gets the list of <see cref="T:JsonWebToken.Jwk"/>.
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.StaticKeyProvider.op_Implicit(JsonWebToken.Jwks)~JsonWebToken.StaticKeyProvider">
            <summary>
            Converts a <see cref="T:JsonWebToken.Jwks"/> to <see cref="T:JsonWebToken.StaticKeyProvider"/>.
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:JsonWebToken.StaticKeyProvider.op_Implicit(JsonWebToken.Jwk)~JsonWebToken.StaticKeyProvider">
            <summary>
            Converts a <see cref="T:JsonWebToken.Jwk"/> to <see cref="T:JsonWebToken.StaticKeyProvider"/>.
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:JsonWebToken.SymmetricJwk">
            <summary>
            Represents a symmetric JSON Web Key as defined in https://tools.ietf.org/html/rfc7518#section-6.
            </summary>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="k">The binary key material.</param>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="k">The binary key material.</param>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="k">The key material encoded in Base64-URL.</param>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.#ctor(JsonWebToken.JwtObject)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.#ctor(System.Byte[],JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="k">The binary key material.</param>
            <param name="alg">The <see cref="T:JsonWebToken.SignatureAlgorithm"/>.</param>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.#ctor(System.ReadOnlySpan{System.Byte},JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="k">The binary key material.</param>
            <param name="alg">The <see cref="T:JsonWebToken.SignatureAlgorithm"/>.</param>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.#ctor(System.String,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="k">The key material encoded in Base64-URL.</param>
            <param name="alg">The <see cref="T:JsonWebToken.SignatureAlgorithm"/>.</param>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.#ctor(System.Byte[],JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="k">The binary key material.</param>
            <param name="alg">The <see cref="T:JsonWebToken.SignatureAlgorithm"/>.</param>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.#ctor(System.ReadOnlySpan{System.Byte},JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="k">The binary key material.</param>
            <param name="alg">The <see cref="T:JsonWebToken.SignatureAlgorithm"/>.</param>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.#ctor(System.String,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="k">The key material encoded in Base64-URL.</param>
            <param name="alg">The <see cref="T:JsonWebToken.KeyManagementAlgorithm"/>.</param>
        </member>
        <member name="P:JsonWebToken.SymmetricJwk.Kty">
            <inheritsdoc />
        </member>
        <member name="P:JsonWebToken.SymmetricJwk.K">
            <summary>
            Gets or sets the 'k' (Key Value).
            </summary>
        </member>
        <member name="P:JsonWebToken.SymmetricJwk.KeySizeInBits">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.FromByteArray(System.Byte[])">
            <summary>
            Creates a new <see cref="T:JsonWebToken.SymmetricJwk"/> from the <paramref name="bytes"/>.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.FromByteArray(System.Byte[],System.Boolean)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="bytes">An array of <see cref="T:System.Byte"/> that contains the key in binary.</param>
            <param name="computeThumbprint"></param>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.FromByteArray(System.Byte[],JsonWebToken.SignatureAlgorithm,System.Boolean)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="bytes">An array of <see cref="T:System.Byte"/> that contains the key in binary.</param>
            <param name="algorithm">The <see cref="T:JsonWebToken.SignatureAlgorithm"/>.</param>
            <param name="computeThumbprint"></param>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.FromByteArray(System.Byte[],JsonWebToken.KeyManagementAlgorithm,System.Boolean)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="bytes">An array of <see cref="T:System.Byte"/> that contains the key in binary.</param>
            <param name="algorithm">The <see cref="T:JsonWebToken.KeyManagementAlgorithm"/>.</param>
            <param name="computeThumbprint"></param>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.FromSpan(System.ReadOnlySpan{System.Byte})">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.FromSpan(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="bytes"></param>
            <param name="computeThumbprint"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.SupportKeyManagement(JsonWebToken.KeyManagementAlgorithm)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.SupportSignature(JsonWebToken.SignatureAlgorithm)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.SupportEncryption(JsonWebToken.EncryptionAlgorithm)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.CreateSigner(JsonWebToken.SignatureAlgorithm)">
            <inheritdoc />
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.CreateKeyWrapper(JsonWebToken.EncryptionAlgorithm,JsonWebToken.KeyManagementAlgorithm)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.CreateKeyUnwrapper(JsonWebToken.EncryptionAlgorithm,JsonWebToken.KeyManagementAlgorithm)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.FromBase64Url(System.String)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.FromBase64Url(System.String,System.Boolean)">
            <summary>
            Returns a new instance of <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="k"></param>
            <param name="computeThumbprint"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.GenerateKey(System.Int32)">
            <summary>
            Generates a new <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="sizeInBits"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.GenerateKey(System.Int32,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Generates a new <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="sizeInBits"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.GenerateKey(System.Int32,JsonWebToken.KeyManagementAlgorithm)">
            <summary>
            Generates a new <see cref="T:JsonWebToken.SymmetricJwk"/>.
            </summary>
            <param name="sizeInBits"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.Canonicalize(System.Buffers.IBufferWriter{System.Byte})">
            <inheritdoc />      
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.AsSpan">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />      
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.Equals(JsonWebToken.Jwk)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.GetHashCode">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.SymmetricJwk.Dispose">
            <inheritsdoc />
        </member>
        <member name="T:JsonWebToken.ThrowHelper">
            <summary>
            Error messages.
            </summary>
        </member>
        <member name="T:JsonWebToken.TokenSegment">
            <summary>
            Represents a segment of token.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenSegment.Start">
            <summary>
            The start of the segment.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenSegment.Length">
            <summary>
            The end of the segment.
            </summary>
        </member>
        <member name="M:JsonWebToken.TokenSegment.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.TokenSegment"/>.
            </summary>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:JsonWebToken.TokenSegment.ToString">
            <inheritsdoc />
        </member>
        <member name="P:JsonWebToken.TokenSegment.IsEmpty">
            <summary>
            Gets wether the segment is empty.
            </summary>
        </member>
        <member name="T:JsonWebToken.TokenValidationContext">
            <summary>
            Represents the context for validating a token.
            </summary>
        </member>
        <member name="M:JsonWebToken.TokenValidationContext.#ctor(JsonWebToken.Jwt)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.TokenValidationContext"/>.
            </summary>
            <param name="jwt"></param>
        </member>
        <member name="F:JsonWebToken.TokenValidationContext.Jwt">
            <summary>
            The decoded JWT.
            </summary>
        </member>
        <member name="T:JsonWebToken.TokenValidationPolicy">
            <summary>
            Defines the validations to apply to a JWT.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationPolicy.NoValidation">
            <summary>
            Represents an policy without any validation. Do not use it without consideration.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationPolicy.MaximumTokenSizeInBytes">
            <summary>
            Gets the maximum token size in bytes.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationPolicy.SignatureValidationPolicy">
            <summary>
            Gets the signature validation parameters.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationPolicy.HasValidation">
            <summary>
            Gets whether the <see cref="T:JsonWebToken.TokenValidationPolicy"/> has validation.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationPolicy.RequireIssuer">
            <summary>
            Gets whether the issuer 'iss' is required.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationPolicy.RequiredIssuerBinary">
            <summary>
            Gets the required issuer, in UTF8 binary format.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationPolicy.RequiredIssuer">
            <summary>
            Gets the required issuer.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationPolicy.RequireAudience">
            <summary>
            Gets whether the audience 'aud' is required.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationPolicy.RequiredAudiencesBinary">
            <summary>
            Gets the required audience array, in UTF8 binary format. At least one audience of this list is required.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationPolicy.RequiredAudiences">
            <summary>
            Gets the required issuer.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationPolicy.ValidationControl">
            <summary>
            Gets the validation control bits.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationPolicy.RequireExpirationTime">
            <summary>
            Gets whether the expiration time 'exp' is required.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationPolicy.ClockSkew">
            <summary>
            Defines the clock skrew used for the token lifetime validation.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationPolicy.CriticalHandlers">
            <summary>
            Gets the extension points used to handle the critical headers.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationPolicy.IgnoreNestedToken">
            <summary>
            Ignores the nested token reading and validation. 
            </summary>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicy.TryValidateJwt(JsonWebToken.Jwt)">
            <summary>
            Try to validate the token, according to the <paramref name="jwt"/>.
            </summary>
            <param name="jwt"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicy.TryValidateHeader(JsonWebToken.JwtHeader)">
            <summary>
            Try to validate the token header, according to the <paramref name="header"/>.
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicy.TryValidateSignature(JsonWebToken.JwtHeader,System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Try to validate the token signature.
            </summary>
            <param name="header"></param>
            <param name="contentBytes"></param>
            <param name="signatureSegment"></param>
            <returns></returns>
        </member>
        <member name="T:JsonWebToken.TokenValidationPolicyBuilder">
            <summary>
            Represents a builder for <see cref="T:JsonWebToken.TokenValidationPolicy"/>.
            </summary>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.Clear">
            <summary>
            Clear the defined policies.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.AddValidator(JsonWebToken.IValidator)">
            <summary>
            Adds a <see cref="T:JsonWebToken.IValidator"/>.
            </summary>
            <param name="validator"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.MaximumTokenSizeInBytes(System.Int32)">
            <summary>
            Defines the maximum token size in bytes.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.IgnoreSignature">
            <summary>
            Ignores the signature validation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.AcceptUnsecureToken">
            <summary>
            Accepts secure token with the 'none' algorithm.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireSignature(JsonWebToken.IKeyProvider,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Requires a valid signature.
            </summary>
            <param name="keyProvider"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireSignature(JsonWebToken.IKeyProvider)">
            <summary>
            Requires a valid signature.
            </summary>
            <param name="keyProvider"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireSignature(System.String)">
            <summary>
            Requires a valid signature.
            </summary>
            <param name="jwksUrl"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireSignature(System.String,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Requires a valid signature.
            </summary>
            <param name="jwksUrl"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireSignature(System.String,System.Net.Http.HttpMessageHandler)">
            <summary>
            Requires a valid signature.
            </summary>
            <param name="jwksUrl"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireSignature(System.String,JsonWebToken.SignatureAlgorithm,System.Net.Http.HttpMessageHandler)">
            <summary>
            Requires a valid signature.
            </summary>
            <param name="jwksUrl"></param>
            <param name="algorithm"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireSignature(JsonWebToken.Jwk)">
            <summary>
            Requires a valid signature.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireSignature(JsonWebToken.Jwk,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Requires a valid signature.
            </summary>
            <param name="key"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireSignature(JsonWebToken.Jwk,System.String)">
            <summary>
            Requires a valid signature.
            </summary>
            <param name="key"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireSignature(System.Collections.Generic.IList{JsonWebToken.Jwk})">
            <summary>
            Requires a valid signature.
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireSignature(System.Collections.Generic.IList{JsonWebToken.Jwk},JsonWebToken.SignatureAlgorithm)">
            <summary>
            Requires a valid signature.
            </summary>
            <param name="keys"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireSignature(JsonWebToken.Jwks)">
            <summary>
            Requires a valid signature.
            </summary>
            <param name="keySet"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireSignature(JsonWebToken.Jwks,JsonWebToken.SignatureAlgorithm)">
            <summary>
            Requires a valid signature.
            </summary>
            <param name="keySet"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireSignature(System.Collections.Generic.IEnumerable{JsonWebToken.IKeyProvider})">
            <summary>
            Requires a valid signature.
            </summary>
            <param name="keyProviders"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireSignature(System.Collections.Generic.IEnumerable{JsonWebToken.IKeyProvider},JsonWebToken.SignatureAlgorithm)">
            <summary>
            Requires a valid signature.
            </summary>
            <param name="keyProviders"></param>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireClaim(System.String)">
            <summary>
            Requires the specified claim.
            </summary>
            <param name="requiredClaim"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireClaim(System.ReadOnlySpan{System.Byte})">
            <summary>
            Requires the specified claim.
            </summary>
            <param name="requiredClaim"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.EnableLifetimeValidation(System.Boolean,System.Int32)">
            <summary>
            Adds lifetime validation.
            </summary>
            <param name="requireExpirationTime"></param>
            <param name="clockSkew"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireAudience(System.String)">
            <summary>
            Requires a specific audience.
            </summary>
            <param name="audience"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireAudience(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requires an audience contained in the <paramref name="audiences"/>.
            </summary>
            <param name="audiences"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireIssuer(System.String)">
            <summary>
            Requires a specific issuer.
            </summary>
            <param name="issuer"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.EnableTokenReplayValidation(JsonWebToken.ITokenReplayCache)">
            <summary>
            Adds token replay validation.
            </summary>
            <param name="tokenReplayCache"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.AddCriticalHeaderHandler(System.String,JsonWebToken.ICriticalHeaderHandler)">
            <summary>
            Adds a critical header handler validation.
            </summary>
            <param name="header"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.IgnoreCriticalHeader">
            <summary>
            Ignore the 'crit' header if present.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.RequireAlgorithm(System.String)">
            <summary>
            Requires a specific algorithm.
            </summary>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.IgnoreNestedToken">
            <summary>
            Ignores the nested token. If present like a JWE containing a nested JWS, the nested token will be leaved as uncompress and decrypted binary data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.Build">
            <summary>
            Builds the <see cref="T:JsonWebToken.TokenValidationPolicy"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationPolicyBuilder.op_Implicit(JsonWebToken.TokenValidationPolicyBuilder)~JsonWebToken.TokenValidationPolicy">
            <summary>
            Convert the <see cref="T:JsonWebToken.TokenValidationPolicyBuilder"/> into a <see cref="T:JsonWebToken.TokenValidationPolicy"/>.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:JsonWebToken.TokenValidationResult">
            <summary>
            Represents the result of a token validation.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationResult.Succedeed">
            <summary>
            Gets whether the token validation is successful.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationResult.Token">
            <summary>
            Gets of set the <see cref="T:JsonWebToken.Jwt"/>.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationResult.Status">
            <summary>
            Gets the status of the validation.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationResult.ErrorClaim">
            <summary>
            Gets the claim that caused the error.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationResult.ErrorHeader">
            <summary>
            Gets the header parameter that cause the error.
            </summary>
        </member>
        <member name="P:JsonWebToken.TokenValidationResult.Exception">
            <summary>
            Gets the <see cref="P:JsonWebToken.TokenValidationResult.Exception"/> that caused the error.
            </summary>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.Expired(JsonWebToken.Jwt)">
            <summary>
            The token has expired, according to the 'nbf' claim.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.TokenReplayed(JsonWebToken.Jwt)">
            <summary>
            The token was already validated previously.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.CriticalHeaderUnsupported(System.String)">
            <summary>
            The 'crit' header defines an unsupported header.
            </summary>
            <param name="criticalHeader"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.EncryptionKeyNotFound">
            <summary>
            The encryption key was not found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.MalformedToken">
            <summary>
            The token is not a JWT in compact representation, is not base64url encoded, and is not a JSON UTF-8 encoded.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.MalformedToken(System.Exception)">
            <summary>
            The token is not a JWT in compact representation, is not base64url encoded, and is not a JSON UTF-8 encoded.
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.MissingEncryptionAlgorithm">
            <summary>
            The 'enc' header parameter is missing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.NotYetValid(JsonWebToken.Jwt)">
            <summary>
            The token is not yet valid, according to the 'nbf' claim.
            </summary>
            <param name="jwtToken"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.Success">
            <summary>
            The token is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.Success(JsonWebToken.Jwt)">
            <summary>
            The token is valid.
            </summary>
            <param name="jwtToken"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.DecryptionFailed">
            <summary>
            The token decryption has failed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.InvalidClaim(JsonWebToken.Jwt,System.ReadOnlySpan{System.Byte})">
            <summary>
            The token has an invalid claim.
            </summary>
            <param name="jwt"></param>
            <param name="claim"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.InvalidClaim(JsonWebToken.Jwt,System.String)">
            <summary>
            The token has an invalid claim.
            </summary>
            <param name="jwt"></param>
            <param name="claim"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.MissingClaim(JsonWebToken.Jwt,System.ReadOnlySpan{System.Byte})">
            <summary>
            The token has a missing claim.
            </summary>
            <param name="jwt"></param>
            <param name="claim"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.MissingClaim(JsonWebToken.Jwt,System.String)">
            <summary>
            The token has a missing claim.
            </summary>
            <param name="jwt"></param>
            <param name="claim"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.InvalidHeader(System.ReadOnlySpan{System.Byte})">
            <summary>
            The token has an invalid header. 
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.InvalidHeader(System.String)">
            <summary>
            The token has an invalid header. 
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.MissingHeader(System.ReadOnlySpan{System.Byte})">
            <summary>
            The token has a missing header.
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:JsonWebToken.TokenValidationResult.DecompressionFailed(System.Exception)">
            <summary>
            The token decompression has failed.
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:JsonWebToken.TokenValidationStatus">
            <summary>
            Defines the valitation status of a JWT.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.Success">
            <summary>
            The token is valid.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.KeyError">
            <summary>
            A key error-related occurred.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.ClaimError">
            <summary>
            A claim error-related occurred.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.HeaderError">
            <summary>
            A header error-related occurred.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.LifetimeError">
            <summary>
            A lifetime error-related occurred.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.SignatureError">
            <summary>
            A signature error-related occurred.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.DecryptionError">
            <summary>
            A decryption error occurred.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.DecompressionError">
            <summary>
            A decompression error occurred.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.DuplicationError">
            <summary>
            A duplication error occurred.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.StructuralError">
            <summary>
            A structural error occurred.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.MalformedToken">
            <summary>
            The token is not a JWT in compact representation, is not base64url encoded, and is not a JSON UTF-8 encoded.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.InvalidSignature">
            <summary>
            The signature is invalid.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.SignatureKeyNotFound">
            <summary>
            The signature key is not found.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.MalformedSignature">
            <summary>
            The signature is not base64url encoded.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.MissingSignature">
            <summary>
            The signature is not present.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.TokenReplayed">
            <summary>
            The token was already validated previously.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.Expired">
            <summary>
            The token has expired, according to the 'nbf' claim.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.NotYetValid">
            <summary>
            The token is not yet valid, according to the 'nbf' claim.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.MissingEncryptionAlgorithm">
            <summary>
            The 'enc' header parameter is missing.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.DecryptionFailed">
            <summary>
            The token decryption has failed.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.EncryptionKeyNotFound">
            <summary>
            The encryption key was not found.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.InvalidClaim">
            <summary>
            The token has an invalid claim.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.MissingClaim">
            <summary>
            The token has a missing claim.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.InvalidHeader">
            <summary>
            The token has an invalid header. 
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.MissingHeader">
            <summary>
            The token has a missing header.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.CriticalHeaderUnsupported">
            <summary>
            The 'crit' header defines an unsupported header.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.CriticalHeaderMissing">
            <summary>
            The 'crit' header defines a missing critical header.
            </summary>
        </member>
        <member name="F:JsonWebToken.TokenValidationStatus.DecompressionFailed">
            <summary>
            The token decompression has failed.
            </summary>
        </member>
        <member name="T:JsonWebToken.WellKnownProperty">
            <summary>
            Defines the well known JWT properties.
            </summary>
        </member>
        <member name="F:JsonWebToken.WellKnownProperty.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:JsonWebToken.WellKnownProperty.Exp">
            <summary>
            exp
            </summary>
        </member>
        <member name="F:JsonWebToken.WellKnownProperty.Aud">
            <summary>
            aud
            </summary>
        </member>
        <member name="F:JsonWebToken.WellKnownProperty.Iat">
            <summary>
            iat
            </summary>
        </member>
        <member name="F:JsonWebToken.WellKnownProperty.Iss">
            <summary>
            iss
            </summary>
        </member>
        <member name="F:JsonWebToken.WellKnownProperty.Jti">
            <summary>
            jti
            </summary>
        </member>
        <member name="F:JsonWebToken.WellKnownProperty.Nbf">
            <summary>
            nbf
            </summary>
        </member>
        <member name="F:JsonWebToken.WellKnownProperty.Kid">
            <summary>
            kid
            </summary>
        </member>
        <member name="F:JsonWebToken.WellKnownProperty.Alg">
            <summary>
            alg
            </summary>
        </member>
        <member name="F:JsonWebToken.WellKnownProperty.Enc">
            <summary>
            enc
            </summary>
        </member>
        <member name="F:JsonWebToken.WellKnownProperty.Cty">
            <summary>
            cty
            </summary>
        </member>
        <member name="F:JsonWebToken.WellKnownProperty.Typ">
            <summary>
            typ
            </summary>
        </member>
        <member name="F:JsonWebToken.WellKnownProperty.Zip">
            <summary>
            zip
            </summary>
        </member>
        <member name="F:JsonWebToken.WellKnownProperty.Sub">
            <summary>
            sub
            </summary>
        </member>
        <member name="T:JsonWebToken.X5uKeyProvider">
            <summary>
            Represents a <see cref="T:JsonWebToken.IKeyProvider"/> that retrieve key set with the 'x5u' header parameter.
            </summary>
        </member>
        <member name="M:JsonWebToken.X5uKeyProvider.#ctor(JsonWebToken.HttpDocumentRetriever)">
            <summary>
            Initializes a new instance of <see cref="T:JsonWebToken.X5uKeyProvider"/>.
            </summary>
            <param name="documentRetriever"></param>
        </member>
        <member name="M:JsonWebToken.X5uKeyProvider.GetKeys(JsonWebToken.JwtHeader)">
            <inheritsdoc />
        </member>
        <member name="M:JsonWebToken.X5uKeyProvider.DeserializeKeySet(System.String)">
            <inheritsdoc />
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
    </members>
</doc>
